"""–û–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ Uno –∏ –∫–∞–∫ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.

–°—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç:
- –ß–∏—Å–ª–∞.
- –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞.
- –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç.
- –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã.
- –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞.
- –î–∞—Ç—å 4 –∫–∞—Ä—Ç—ã.
"""

from enum import IntEnum
from random import randint
from typing import Any, Iterable, Iterator, Self

from loguru import logger

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
# ===========================

# Emoji –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–∞—Ä—Ç—ã
COLOR_EMOJI = ["‚ù§Ô∏è", "üíõ", "üíö", "üíô", "üñ§"]

class CardColor(IntEnum):
    """–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∫–∞—Ä—Ç UNO."""

    RED = 0
    YELLOW = 1
    GREEN = 2
    BLUE = 3
    BLACK = 4

    def __str__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ —Å–º–∞–π–ª–∏–∫–∞."""
        return COLOR_EMOJI[self.value]

CARD_TYPES = ["", "skip", "reverse", "+", "choose", "take"]

class CardType(IntEnum):
    """–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∫–∞—Ä—Ç UNO.

    - NUMBER: –ß–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 9.
    - TURN: –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞.
    - REVERSE: –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–æ–≤.
    - TAKE: –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—ã.
    - CHOOSE_COLOR: –í—ã–±–∏—Ä–∞–µ—Ç –ª—é–±–æ–π —Ü–≤–µ—Ç –¥–ª—è –∫–∞—Ä—Ç—ã.
    - TAKE_FOUR: –í—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç, –¥–∞—ë—Ç +4 –∫–∞—Ä—Ç—ã —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É.
    """

    NUMBER = 0
    TURN = 1
    REVERSE = 2
    TAKE = 3
    CHOOSE_COLOR = 4
    TAKE_FOUR = 5

    def __str__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."""
        return CARD_TYPES[self.value]


# –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç
# =============

class BaseCard:
    """–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã Uno.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç.
    """

    def __init__(self, color: CardColor, card_type: CardType):
        self.color: CardColor = color
        self.card_type: CardType = card_type
        self.value: int = 0
        self.cost: int = 0

    def can_cover(self, other_card: Self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥—Ä—É–≥–∞—è –∫–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é.

        –ü–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–≥—Ä—ã —Ü–µ–ª—å –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ - –∏–∑–±–∞–≤–∏—Ç—å –æ—Ç —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç.
        –ß—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –∫–∞—Ä—Ç, –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É —Å
        –≤–µ—Ä—Ö—É—à–∫–∏ –æ–¥–Ω–æ–π –∏–∑ —Å–≤–æ–µ–π —Ä—É–∫–∏.
        –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –∫–æ–Ω—á–∞—Ç—Å—è - –≤—ã –ø–æ–±–µ–¥–∏–ª–∏.

        –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É
        –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç–æ–π.

        Args:
            other_card (BaseCard): –ö–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫—Ä—ã—Ç—å
                —Ç–µ–∫—É—â—É—é.

        Returns:
            bool: –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É –¥–∞–Ω–Ω–æ–π

        """
        if other_card.color == CardColor.BLACK:
            return True
        elif self.color == other_card.color:
            return True
        elif (self.card_type == other_card.card_type
            and self.value == other_card.value
        ):
            return True
        return False

    def get_cover_cards(
        self, hand: Iterable[Self]
    ) -> Iterator[tuple[Self, bool]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ –∫–∞—Ä—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—Ä—ã—Ç—å –∏–∑ —Å–≤–æ–µ–π —Ä—É–∫–∏.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—é —Å–≤–æ—é —Ä—É–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç,
        –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é.

        Args:
            hand (Iterable[BaseCard]): –ö–∞—Ä—Ç—ã –≤ –≤–∞—à–µ–π —Ä—É–∫–µ.

        Yields:
            Iterator[BaseCard, bool]: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É –∏ –º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã
                –µ—é –ø–æ–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é.

        """
        for card in hand:
            yield (card, self.can_cover(card))

    def use_card(self, game) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã.

        –£ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –µ—Å—Ç—å —Å–≤–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
        –í—Å–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –ø—É—Ç—ë–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–≥—Ä—ã.

        Args:
            game (UnoGame): –¢–µ–∫—É—â–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –≥–¥–µ –≤—ã–∑–≤–∞–Ω–∞ –∫–∞—Ä—Ç–∞.

        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∫–∞—Ä—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–≥—Ä—É.

        """
        logger.debug("Used card {} in chat {}", self, game.chat_id)


    def __call__(self, game) -> None:
        """–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π —Å–∞—Ö–∞—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã.

        –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.
        –Ø–≤–ª—è–µ—Ç—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –¥–ª—è –º–µ—Ç–æ–¥–∞ use_card.
        """
        return self.use_card(game)

    def __str__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –≤–∏–¥–µ."""
        return f"{self.color} {self.card_type} {self.value}"

    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ."""
        return self.__str__()

    def __eq__(self, other_card: Self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–≤—É—Ö –∫–∞—Ä—Ç."""
        return (
            self.color == other_card.color
            and self.card_type == other_card.card_type
            and self.value == other_card.value
            and self.cost == other_card.cost
        )

    def __lt__(self, other_card: Self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –º–µ–Ω—å—à–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —á–µ–º –ø—Ä–æ—á–∞—è."""
        return (
            self.color < other_card.color
            and self.value < other_card.value
            and self.cost < other_card.cost
        )


class NumberCard(BaseCard):
    """–ö–∞—Ä—Ç–∞ —Å —á–∏—Å–ª–æ–º.

    –î–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –∫–∞–∫–∏–º–∏-–ª–∏–±–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏.
    –ü—Ä–æ—Å—Ç–æ –∫–∞—Ä—Ç–∞ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9.
    """

    def __init__(self, color: CardColor, value: int):
        super().__init__(color, CardType.NUMBER)
        self.value = value
        self.cost = value

    def __str__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –≤–∏–¥–µ."""
        return f"{self.color} {self.value}"


class TurnCard(BaseCard):
    """–ö–∞—Ä—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.
    """

    def __init__(self, color: CardColor, value: int):
        super().__init__(color, CardType.TURN)
        self.value = value
        self.cost = 20

    def use_card(self, game) -> None:
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞.

        Args:
            game (UnoGame): –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∏–≥—Ä—ã.

        """
        logger.info("Skip {} players", self.value)
        game.skip_players(self.value)

    def __str__(self):
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –≤–∏–¥–µ."""
        return f"{self.color} skip {self.value if self.value != 1 else ''}"


class ReverseCard(BaseCard):
    """–ö–∞—Ä—Ç–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞.

    –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–æ–≤.
    """

    def __init__(self, color: CardColor):
        super().__init__(color, CardType.REVERSE)
        self.cost = 20

    def use_card(self, game) -> None:
        """–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –æ—á–µ—Ä—ë–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤ –¥–ª—è –∏–≥—Ä—ã.

        Args:
            game (UnoGame): –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∏–≥—Ä—ã.

        """
        # –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–≤–æ–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∫–∞—Ä—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        if len(game.players) == 2: # noqa
            game.skip_players()
        else:
            game.reverse = not game.reverse
            logger.info("Reverse flag now {}", game.reverse)

    def __str__(self):
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –≤–∏–¥–µ."""
        return f"{self.color} reverse"


class TakeCard(BaseCard):
    """–í–∑—è—Ç—å –¥–≤–µ –∫–∞—Ä—Ç—ã.

    –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Ç—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –±–æ–ª—å—à–µ.
    –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç.
    """

    def __init__(self, color: CardColor, value: int = 2):
        super().__init__(color, CardType.TAKE)
        self.value = value
        self.cost = 20

    def use_card(self, game):
        """–°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç.

        Args:
            game (UnoGame): –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∏–≥—Ä—ã.

        """
        game.take_counter += self.value
        logger.info("Take counter increase by {} and now {}",
            self.value, game.take_counter
        )

    def __str__(self):
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –≤–∏–¥–µ."""
        return f"{self.color} +{self.value}"


class ChooseColorCard(BaseCard):
    """–∫–∞—Ä—Ç–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã.
    """

    def __init__(self):
        super().__init__(CardColor.BLACK, CardType.CHOOSE_COLOR)
        self.cost = 50

    def use_card(self, game):
        """–°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç.

        Args:
            game (UnoGame): –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∏–≥—Ä—ã.

        """
        if game.rules.auto_choose_color:
            logger.info("Auto choose color for card")
            if game.reverse:
                self.color = CardColor((game.deck.top.color + 1) % 3)
            else:
                self.color = CardColor((game.deck.top.color - 1) % 3)
        elif game.rules.choose_random_color:
            logger.info("Choose random color for card")
            self.color = CardColor(randint(0, 3))
        else:
            logger.info("Set choose color flag to True")
            game.choose_color_flag = True

    def __str__(self):
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –≤–∏–¥–µ."""
        return f"{self.card_type} {self.color}"


class TakeFourCard(BaseCard):
    """–ö–∞—Ä—Ç–∞ –¥–∞—Ç—å +4.

    –û—Å–æ–±–∞—è –∫–∞—Ä—Ç–∞, –º–µ–Ω—è—é—â–∞—è —Ü–≤–µ—Ç –∏ –≤—ã–¥–∞—é—â–∞—è —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É 4 –∫–∞—Ä—Ç—ã.
    """

    def __init__(self, value: int = 4):
        super().__init__(CardColor.BLACK, CardType.TAKE_FOUR)
        self.value = value
        self.cost = 50

    def use_card(self, game):
        """–°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç.

        Args:
            game (UnoGame): –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∏–≥—Ä—ã.

        """
        if game.rules.auto_choose_color:
            logger.info("Auto choose color for card")
            if game.reverse:
                self.color = CardColor((game.deck.top.color + 1) % 3)
            else:
                self.color = CardColor((game.deck.top.color - 1) % 3)
        elif game.rules.choose_random_color:
            logger.info("Choose random color for card")
            self.color = CardColor(randint(0, 3))
        else:
            game.choose_color_flag = True
        game.take_counter += 4
