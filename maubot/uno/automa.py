from random import choice, randint, random
from typing import TYPE_CHECKING, Self

from loguru import logger

from maubot.uno.card import BaseCard, CardColor, CardType
from maubot.uno.enums import GameState
from maubot.uno.player import Player

if TYPE_CHECKING:
    from maubot.uno.game import UnoGame


class Automa(Player):
    def __init__(self, game: 'UnoGame', bot_name, user=None):
        super().__init__(game, user)
        self.bot_name = bot_name

    @property
    def name(self) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞."""
        name = self.bot_name if self.user is None else self.ser.first_name
        return name + ' [üîß]'

    def select_random_card(self) -> BaseCard | None:
        cards = self.get_cover_cards()
        if not len(cards.cover):
            return None
        return choice(cards.cover)

    async def auto_turn(self):
        self.game.journal.set_markup(None)
        self.game.journal.add("‚ú® –í—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥")
        if self.game.deck.top.card_type == CardType.TAKE_FOUR:
            if random() > 0.5:
                self.game.journal.add("‚ú® –Ø –¥—É–º–∞—é —Ç—ã –±–ª–µ—Ñ—É–µ—à—å!")
                self.simulate_bluff()
            else:
                self.game.journal.add("‚ú® –ü—Ä–æ—Å—Ç–æ –≤–æ–∑—å–º—É –∫–∞—Ä—Ç—ã..")
                self.simulate_take()

                if self.game.state == GameState.SHOTGUN:
                    self.simulate_shotgun()
                    await self.game.journal.send_journal()
                    await self.game.next_turn()

            await self.game.next_turn()
            await self.game.journal.send_journal()

        card = self.select_random_card()
        if card is None:
            self.game.journal.add("‚ú® –ü–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å")
            skip_flag  = self.simulate_take()
            if skip_flag:
                await self.game.journal.send_journal()
                await self.game.next_turn()
            elif self.game.state == GameState.SHOTGUN:
                self.simulate_shotgun()
                await self.game.journal.send_journal()
                await self.game.next_turn()
            else:
                card = self.select_random_card()
                if card is None:
                    await self.game.journal.send_journal()
                    await self.game.next_turn()
                else:
                    self.game.journal.add(f"‚ú® –†–∞–∑—ã–≥—Ä—ã–≤–∞—é –∫–∞—Ä—Ç—É {card}")
                    await self.game.journal.send_journal()
                    await self.simulate_play_card(card)
                    if self.game.state == GameState.CHOOSE_COLOR:
                        color = CardColor(randint(1, 4))
                        self.game.journal.add(f"‚ú® –í—ã–±–∏—Ä–∞—é —Ü–≤–µ—Ç {color}")
                        await self.game.journal.send_journal()
                        await self.game.choose_color(color)
            
                    self.game.journal.add("‚ú® –•–æ–¥ –æ–∫–æ–Ω—á–µ–Ω")
                    self.game.journal.add(f"‚ú® –î–∞–ª—å—à–µ —Ö–æ–¥–∏—Ç {self.game.player.name}")
                    await self.game.journal.send_journal()
        else:
            self.game.journal.add(f"‚ú® –†–∞–∑—ã–≥—Ä—ã–≤–∞—é –∫–∞—Ä—Ç—É {card}")
            await self.game.journal.send_journal()
            await self.simulate_play_card(card)
            if self.game.state == GameState.CHOOSE_COLOR:
                color = CardColor(randint(1, 4))
                self.game.journal.add(f"‚ú® –í—ã–±–∏—Ä–∞—é —Ü–≤–µ—Ç {color}")
                await self.game.journal.send_journal()
                await self.game.choose_color(color)
      
            self.game.journal.add("‚ú® –•–æ–¥ –æ–∫–æ–Ω—á–µ–Ω")
            self.game.journal.add(f"‚ú® –î–∞–ª—å—à–µ —Ö–æ–¥–∏—Ç {self.game.player.name}")
            await self.game.journal.send_journal()

    def __eq__(self, other_player: Self) -> bool:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if isinstance(other_player, Player):
            return False
        return self.bot_name == other_player.name

    def __ne__(self, other_player: Self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏–≥—Ä–æ–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç."""
        if isinstance(other_player, Player):
            return True
        return self.bot_name != other_player.user.id

    # –°–∏–º—É–ª—è—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞
    # ==========================

    def select_player(self):
        pass

    def simulate_take(self) -> bool:
        if self.game.rules.take_until_cover and self.game.take_counter == 0:
            self.game.take_counter = self.game.deck.count_until_cover()
            self.game.journal.add(f"üç∑ –±–µ—Ä—É {self.game.take_counter} –∫–∞—Ä—Ç.\n")

        if not self.game.rules.shotgun and not self.game.rules.single_shotgun:
            return self.simulate_take_card()

        elif self.game.take_counter <= 2 or self.game.state == GameState.SHOTGUN:
            return self.simulate_take_card()

        current = (
            self.game.shotgun_current if self.game.rules.single_shotgun
            else self.shotgun_current
        )
        self.game.journal.add((
            "üíº –£ –Ω–∞—Å –¥–ª—è –í–∞—Å –µ—Å—Ç—å <b>–¥–µ–ª–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>!\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ <b>–≤–∑—è—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã</b> "
            "–∏–ª–∏ –∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å <b>–≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –∏–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞</b>.\n"
            "–ï—Å–ª–∏ –≤–∞–º –ø–æ–≤–µ–∑—ë—Ç, —Ç–æ –∫–∞—Ä—Ç—ã –±—É–¥–µ—Ç –±—Ä–∞—Ç—å —É–∂–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫.\n"
            f"üî´ –ò–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ —Å—Ç—Ä–µ–ª—è–ª–∏ {current} / 8 —Ä–∞–∑\n."
        ))
        self.game.state = GameState.SHOTGUN

    def simulate_take_card(self: Player) -> bool:
        """–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        logger.info("{} take cards", self)
        take_counter = self.game.take_counter
        self.take_cards()
        if len(self.game.deck.cards) == 0:
            self.game.journal.add("üÉè –í –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞.")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã, —Ç–æ –æ–Ω –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥
        if self.game.deck.top.card_type in (CardType.TAKE, CardType.TAKE_FOUR) and take_counter:
            return True
        return False

    def simulate__bluff(self: Player) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
        logger.info("{} call bluff", self)
        bluff_player = self.game.bluff_player
        if bluff_player.bluffing:
            self.game.journal.add((
                "üîé <b>–ó–∞–º–µ—á–µ–Ω –±–ª–µ—Ñ</b>!\n"
                f"{bluff_player.user.first_name} –ø–æ–ª—É—á–∞–µ—Ç "
                f"{self.game.take_counter} –∫–∞—Ä—Ç."
            ))
            bluff_player.take_cards()

            if len(self.game.deck.cards) == 0:
                self.game.journal.add("üÉè –í –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç.")
        else:
            self.game.take_counter += 2
            self.game.journal.add((
                f"üé© {bluff_player.user.first_name} <b>–ß–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫</b>!\n"
                f"{self.user.first_name} –ø–æ–ª—É—á–∞–µ—Ç "
                f"{self.game.take_counter} –∫–∞—Ä—Ç.\n"
            ))
            self.take_cards()
            if len(self.game.deck.cards) == 0:
                self.game.journal.add("üÉè –í –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç.")

    async def simulate_play_card(self: Player, card: BaseCard) -> str:
        """–†–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–æ—à–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É."""
        logger.info("Push {} from {}", card, self.bot_name)
        self.hand.remove(card)
        await self.game.process_turn(card)
        self.game.journal.set_markup(None)

        if len(self.hand) == 1:
            self.game.journal.add("üåü UNO!\n")

        if len(self.hand) == 0:
            self.game.journal.add(f"üëë {self.user.first_name} –ø–æ–±–µ–¥–∏–ª(–∞)!\n")
            self.game.winners.append(self)
            await self.game.remove_player(self.bot_name)

            if not self.game.started:
                self.game.journal.add(messages.end_game_message(self.game))

        elif card.cost == 2 and self.game.rules.twist_hand:
            self.game.journal.add(
                f"‚ú® {self.bot_name} –ó–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è c –∫–µ–º –æ–±–º–µ–Ω—è—Ç—å—Å—è."
            )
            self.game.journal.set_markup(keyboards.select_player_markup(player))

        elif (self.game.rules.rotate_cards
            and self.game.deck.top.cost == 0
            and len(self.hand) > 0
        ):
            self.game.journal.add((
                "ü§ù –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ–±–º–µ–Ω—è–ª–∏—Å—å –∫–∞—Ä—Ç–∞–º–∏ –ø–æ –∫—Ä—É–≥—É.\n"
                f"{messages.get_room_players(self.game)}"
            ))

        if card.card_type in (
            CardType.TAKE_FOUR, CardType.CHOOSE_COLOR
        ):
            self.game.journal.add(
                f"‚ú® {self.bot_name} –ó–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è –æ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞."
            )

        if (self.game.rules.random_color
            or self.game.rules.choose_random_color
            or self.game.rules.auto_choose_color
        ):
            self.game.journal.add(
                f"üé® –Ø –≤—ã–±–∏—Ä–∞—é —Ü–≤–µ—Ç.. {self.game.deck.top.color}"
            )

