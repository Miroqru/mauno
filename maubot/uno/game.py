"""–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è.

–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.
–ò–Ω–∞—á–µ –≥–æ–≤–æ—Ä—è –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Ö–æ–¥—ã –∏–≥—Ä–æ–∫–æ–≤ –∏
–¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç –∏–∑ –∫–æ–ª–æ–¥—ã.
"""

from dataclasses import dataclass
from datetime import datetime
from random import randint, shuffle

from loguru import logger

from maubot.uno.card import BaseCard, CardColor
from maubot.uno.deck import Deck
from maubot.uno.enums import GameState
from maubot.uno.exceptions import (
    AlreadyJoinedError,
    LobbyClosedError,
    NoGameInChatError,
)
from maubot.uno.player import Player


@dataclass(slots=True)
class GameRules:
    """–ù–∞–±–æ—Ä –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã."""

    wild: bool = False
    auto_choose_color: bool = False
    choose_random_color: bool = False
    random_color: bool = False
    debug_cards: bool = False
    twist_hand: bool = False
    rotate_cards: bool = False
    take_until_cover: bool = False
    shotgun: bool = False

@dataclass(frozen=True, slots=True)
class Rule:
    """–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –∏–≥—Ä—ã."""

    key: str
    name: str

RULES = (
    Rule("wild", "üêâ –î–∏–∫–∏–µ –∫–∞—Ä—Ç—ã"),
    Rule("auto_choose_color", "üÉè —Å–∞–º–æ—Ü–≤–µ—Ç"),
    Rule("choose_random_color", "üé® –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç"),
    Rule("random_color", "üé® –ö–∞–∫–æ–π —Ü–≤–µ—Ç –¥–∞–ª—å—à–µ?"),
    Rule("debug_cards", "ü¶ù –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã!"),
    Rule("twist_hand", "ü§ù –û–±–º–µ–Ω —Ä—É–∫–∞–º–∏"),
    Rule("rotate_cards", "üß≠ –û–±–º–µ–Ω —Ç–µ–ª–∞–º–∏."),
    Rule("take_until_cover", "üç∑ –ë–µ—Ä—É –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ."),
    Rule("shotgun", "üî´ –†—É–ª–µ—Ç–∫–∞."),
)


class UnoGame:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—É—é –∏–≥—Ä—É Uno.

    –ö–∞–∂–¥–∞—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—É.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç –∏ –æ—á–µ—Ä—ë–¥–Ω–æ—Å—Ç–∏ —Ö–æ–¥–æ–≤.
    """

    def __init__(self, chat_id: int):
        self.chat_id = chat_id
        self.rules = GameRules()
        self.deck = Deck()

        # –ò–≥—Ä–æ–∫–∏ Uno
        self.current_player: int = 0
        self.start_player = None
        self.bluff_player: Player = None
        self.players: list[Player] = []
        self.winners: list[Player] = []
        self.losers: list[Player] = []

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        self.started: bool = False
        self.open: bool = True
        self.reverse: bool = False
        self.take_counter: int = 0
        self.state: GameState = GameState.NEXT

        # –¢–∞–π–º–µ—Ä—ã
        self.game_start = datetime.now()
        self.turn_start = datetime.now()

    @property
    def player(self) -> Player:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
        return self.players[self.current_player % len(self.players)]

    @property
    def prev(self) -> Player:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
        if self.reverse:
            prev_index = (self.current_player + 1) % len(self.players)
        else:
            prev_index = (self.current_player - 1) % len(self.players)
        return self.players[prev_index]


    def get_player(self, user_id: int) -> Player | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ —Å—Ä–µ–¥–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –µ–≥–æ ID."""
        for player in self.players:
            if player.user.id == user_id:
                return player
        return None


    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º –∏–≥—Ä—ã
    # =======================

    def start(self) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ —á–∞—Ç–µ."""
        logger.info("Start new game in chat {}", self.chat_id)
        self.winners.clear()
        self.losers.clear()
        self.started = True
        shuffle(self.players)

        if self.rules.wild:
            self.deck.fill_wild()
        else:
            self.deck.fill_classic()

        for player in self.players:
            player.take_first_hand()

        self.take_first_card()

    def end(self) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É."""
        self.players.clear()
        self.started = False

    def take_first_card(self):
        """–ë–µ—Ä—ë—Ç –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—ã."""
        while self.deck.top is None or self.deck.top.color == CardColor.BLACK:
            card = self.deck.take_one()
            if card.color == CardColor.BLACK:
                self.deck.put(card)
            else:
                self.deck.put_on_top(card)

        self.deck.top(self)

    def process_turn(self, card: BaseCard) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ–¥."""
        logger.info("Playing card {}", card)
        card(self)
        self.deck.put_on_top(card)
       
        if (self.rules.twist_hand
            and self.deck.top.cost == 2
            and len(self.player.hand) > 1
        ):
            self.state = GameState.TWIST_HAND
        elif self.state == GameState.NEXT:
            if self.rules.random_color:
                self.deck.top.color = CardColor(randint(0, 3))
            elif (self.rules.rotate_cards
                and self.deck.top.cost == 0
                and len(self.player.hand) > 1
            ):
                self.rotate_cards()       
            self.next_turn()

    def choose_color(self, color: CardColor):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã."""
        self.deck.top.color = color
        self.next_turn()

    def next_turn(self) -> None:
        """–ü–µ—Ä–µ–¥–∞—ë—Ç —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É."""
        logger.info("Next Player")
        self.state = GameState.NEXT
        self.player.took_card = False
        self.turn_start = datetime.now()
        self.skip_players()


    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤
    # ==========================

    def add_player(self, user) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É."""
        logger.info("Joining {} in game with id {}", user, self.chat_id)
        if not self.open:
            raise LobbyClosedError()

        player = self.get_player(user.id)
        if player is not None:
            raise AlreadyJoinedError()

        player = Player(self, user)
        player.on_leave()
        if self.started:
            player.take_first_hand()

        self.players.append(player)

    def remove_player(self, user_id: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–≥—Ä—ã."""
        logger.info("Leaving {} game with id {}", user_id, self.chat_id)

        player = self.get_player(user_id)
        if player is None:
            raise NoGameInChatError()

        if player == self.player:
            self.next_turn()
            if self.state == GameState.SHOTGUN:
                self.losers.append(player)
        else:
            self.losers.append(player)

        player.on_leave()
        self.players.remove(player)

        if len(self.players) <= 1:
            self.winners.extend(self.players)
            self.end()

    def skip_players(self, n: int = 1) -> None:
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.

        –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤.

        Args:
            n (int): –°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (1).

        """
        if self.reverse:
            self.current_player = (self.current_player - n) % len(self.players)
        else:
            self.current_player = (self.current_player + n) % len(self.players)

    def rotate_cards(self):
        """–ú–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–∞—Ö –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤."""
        last_hand = self.players[-1].hand.copy()
        for i in range(len(self.players) - 1, 0, -1):
            self.players[i].hand = self.players[i - 1].hand.copy()

        self.players[0].hand = last_hand
