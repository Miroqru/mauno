"""–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏.

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.
"""

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from loguru import logger

from mau.card import TakeCard, TakeFourCard
from mau.enums import GameState
from mau.game import UnoGame
from mau.messages import end_game_message
from mau.player import BaseUser, Player
from mau.session import SessionManager
from maubot import filters, keyboards
from maubot.messages import NOT_ENOUGH_PLAYERS, get_room_status

router = Router(name="Player")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========


@router.message(Command("join"), filters.ActiveGame())
async def join_player(
    message: Message, sm: SessionManager, game: UnoGame, bot: Bot
) -> None:
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–≥—Ä–µ."""
    if message.from_user is None:
        raise ValueError("User can`t be none")

    # TODO: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫ –≤ —Å–∏–ª–µ!
    sm.join(
        str(message.chat.id),
        BaseUser(str(message.from_user.id), message.from_user.mention_html()),
    )

    try:
        await message.delete()
    except Exception as e:
        logger.warning("Unable to delete message: {}", e)
        await message.answer(
            "üëÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
        )

    if not game.started:
        await bot.edit_message_text(
            text=get_room_status(game),
            chat_id=game.room_id,
            message_id=game.lobby_message,
            reply_markup=keyboards.get_room_markup(game),
        )
    else:
        game.journal.add(
            f"üç∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, {message.from_user.mention_html()}!"
        )
        await game.journal.send_journal()


@router.message(Command("leave"), filters.ActivePlayer())
async def leave_player(
    message: Message,
    sm: SessionManager,
    game: UnoGame,
    player: Player,
) -> None:
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–≥—Ä—ã."""
    sm.leave(player)

    if game.started:
        game.journal.add(
            text=(f"üç∞ –õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥ –∑–∞ {game.player.name}.")
        )
        await game.journal.send_journal()
    else:
        status_message = f"{NOT_ENOUGH_PLAYERS}\n\n{end_game_message(game)}"
        sm.remove(str(message.chat.id))
        await message.answer(status_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
# ======================


@router.callback_query(F.data == "join", filters.ActiveGame())
async def join_callback(
    query: CallbackQuery, sm: SessionManager, game: UnoGame
) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É."""
    # TODO: –¢—É—Ç —Ç–æ–∂–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ—Ç–ª–æ–≤ –æ—à–∏–±–æ—á–µ–∫
    sm.join(
        str(query.message.chat.id),
        BaseUser(str(query.from_user.id), query.from_user.mention_html()),
    )

    if isinstance(query.message, Message):
        await query.message.edit_text(
            text=get_room_status(game),
            reply_markup=keyboards.get_room_markup(game),
        )


@router.callback_query(F.data == "take", filters.NowPlaying())
async def take_cards_call(
    query: CallbackQuery,
    sm: SessionManager,
    game: UnoGame,
    player: Player,
) -> None:
    """–ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã."""
    if game.player == player:
        game.journal.add("üÉè –í—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ <b>–≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã</b>.")
    else:
        game.set_current_player(player)
        game.journal.add(f"üÉè –ù–µ–∫—Ç–æ {player.name} —Ä–µ—à–∏–ª–∏ <b>–≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã</b>.")

    player.take_cards()
    if len(player.game.deck.cards) == 0:
        game.journal.add(
            "üÉè –í –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞.",
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤–∑—è–ª –∫–∞—Ä—Ç—ã, —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ö–æ–¥
    if isinstance(game.deck.top, TakeCard | TakeFourCard) and game.take_counter:
        game.next_turn()
        game.journal.add(f"üç∞ <b>–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥–∏—Ç</b>: {game.player.name}")
    else:
        game.journal.add(f"‚òï {game.player.name} <b>–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç</b>.")
    await game.journal.send_journal()


@router.callback_query(F.data == "shot", filters.NowPlaying())
async def shotgun_call(
    query: CallbackQuery,
    sm: SessionManager,
    game: UnoGame,
    player: Player,
) -> None:
    """–ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã."""
    res = player.shotgun()
    game.journal.set_actions(None)
    if not res:
        game.take_counter = round(game.take_counter * 1.5)
        game.journal.add(
            "‚ú® –ù–∞ —Å–µ–π —Ä–∞–∑ <b>–≤–∞–º –ø–æ–≤–µ–∑–ª–æ</b> –∏ —Ä–µ–≤–æ–ª—å–≤–µ—Ä –Ω–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª.",
        )
        game.journal.add(
            f"üÉè –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç <b>{game.take_counter} –∫–∞—Ä—Ç</b>!\n",
        )
        await game.journal.send_journal()
        if game.player != player:
            game.set_current_player(player)
        game.next_turn()
        game.state = GameState.SHOTGUN
    else:
        if game.player == player:
            game.journal.add("üò¥ –ù–∞ —ç—Ç–æ–º –∏–≥—Ä–∞ –¥–ª—è –≤–∞—Å <b>–∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å</b>.\n")
        else:
            game.journal.add(f"üò¥ {player.name} –ø–æ–ø–∞–ª –ø–æ–¥ –ø—É–ª—é..\n")

        await game.journal.send_journal()
        sm.leave(player)

    if game.started:
        game.journal.add(f"üç∞ –õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Å–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–∏—Ç {game.player.name}.")
        await game.journal.send_journal()
    else:
        status = end_game_message(game)
        sm.remove(game.room_id)
        if isinstance(query.message, Message):
            await query.message.edit_text(text=status)
