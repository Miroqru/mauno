"""–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏.

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.
"""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from loguru import logger

from mau.card import TakeCard, TakeFourCard
from mau.enums import GameState
from mau.exceptions import AlreadyJoinedError
from mau.game.game import UnoGame
from mau.game.player import BaseUser, Player
from maubot import filters
from maubot.events.journal import MessageChannel

router = Router(name="Player")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========


@router.message(Command("join"), filters.ActiveGame())
async def join_player(message: Message, game: UnoGame) -> None:
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–≥—Ä–µ."""
    if message.from_user is None:
        raise ValueError("User can`t be none")

    game.join_player(
        BaseUser(str(message.from_user.id), message.from_user.mention_html()),
    )

    try:
        await message.delete()
    except Exception as e:
        logger.warning("Unable to delete message: {}", e)
        await message.answer(
            "üëÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
        )


@router.message(Command("leave"), filters.ActivePlayer())
async def leave_player(message: Message, player: Player) -> None:
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–≥—Ä—ã."""
    player.game.leave_player(player)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
# ======================


@router.callback_query(F.data == "join", filters.ActiveGame())
async def join_callback(query: CallbackQuery, game: UnoGame) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É."""
    if not isinstance(query.message, Message):
        raise ValueError("Query message should be Message instance")

    try:
        game.join_player(
            BaseUser(str(query.from_user.id), query.from_user.mention_html())
        )
    except AlreadyJoinedError:
        await query.answer("üëã –í—ã —É–∂–µ —Å –Ω–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ")


@router.callback_query(F.data == "take", filters.NowPlaying())
async def take_cards_call(
    query: CallbackQuery, game: UnoGame, player: Player, channel: MessageChannel
) -> None:
    """–ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã."""
    if game.player == player:
        channel.add("üÉè –í—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ <b>–≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã</b>.")
    else:
        game.pm.set_cp(player)
        channel.add(f"üÉè {player.name} —Ä–µ—à–∏–ª <b>–≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã</b>.")

    player.take_cards()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤–∑—è–ª –∫–∞—Ä—Ç—ã, —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ö–æ–¥
    if isinstance(game.deck.top, TakeCard | TakeFourCard) and game.take_counter:
        game.next_turn()
    else:
        channel.add(f"‚òï {game.player.name} <b>–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç</b>.")
        await channel.send()


@router.callback_query(F.data == "shot", filters.NowPlaying())
async def shotgun_call(
    query: CallbackQuery, game: UnoGame, player: Player, channel: MessageChannel
) -> None:
    """–ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã."""
    res = player.shot()
    channel.set_markup(channel.default_markup)
    if not res:
        game.take_counter = round(game.take_counter * 1.5)
        channel.add(
            "‚ú® –ù–∞ —Å–µ–π —Ä–∞–∑ <b>–≤–∞–º –ø–æ–≤–µ–∑–ª–æ</b> –∏ —Ä–µ–≤–æ–ª—å–≤–µ—Ä –Ω–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª.\n"
            f"üÉè –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç <b>{game.take_counter} –∫–∞—Ä—Ç</b>!\n"
        )
        await channel.send()
        if game.player != player:
            game.pm.set_cp(player)
        game.next_turn()
        game.state = GameState.SHOTGUN
    else:
        if game.player == player:
            channel.add("üò¥ –ù–∞ —ç—Ç–æ–º –∏–≥—Ä–∞ –¥–ª—è –≤–∞—Å <b>–∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å</b>.\n")
        else:
            channel.add(f"üò¥ {player.name} –ø–æ–ø–∞–ª –ø–æ–¥ –ø—É–ª—é..\n")
        game.leave_player(player)
