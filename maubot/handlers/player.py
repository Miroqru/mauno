"""–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏.

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.
"""

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from loguru import logger

from mau.card import TakeCard, TakeFourCard
from mau.enums import GameState
from mau.exceptions import (
    AlreadyJoinedError,
    DeckEmptyError,
    LobbyClosedError,
    NoGameInChatError,
)
from mau.game import UnoGame
from mau.messages import end_game_message
from mau.player import BaseUser, Player
from mau.session import SessionManager
from maubot import keyboards
from maubot.filters import NowPlaying
from maubot.messages import (
    NO_ROOM_MESSAGE,
    NOT_ENOUGH_PLAYERS,
    get_closed_room_message,
    get_room_status,
)

router = Router(name="Player")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========


@router.message(Command("join"))
async def join_player(
    message: Message, sm: SessionManager, game: UnoGame | None, bot: Bot
) -> None:
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–≥—Ä–µ."""
    if message.from_user is None:
        raise ValueError("User can`t be none")
    if game is None:
        raise NoGameInChatError

    try:
        sm.join(
            str(message.chat.id),
            BaseUser(
                str(message.from_user.id), message.from_user.mention_html()
            ),
        )
    except NoGameInChatError:
        await message.answer(NO_ROOM_MESSAGE)
    except LobbyClosedError:
        await message.answer(get_closed_room_message(game))
    except AlreadyJoinedError:
        await message.answer("üç∞ –í—ã —É–∂–µ —Å –Ω–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ.")
    except DeckEmptyError:
        await message.answer("üëÄ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –Ω–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–ª—è –≤–∞—Å –∫–∞—Ä—Ç.")
    else:
        try:
            await message.delete()
        except Exception as e:
            logger.warning("Unable to delete message: {}", e)
            await message.answer(
                "üëÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
            )

    if game is not None and game.lobby_message is not None:
        if not game.started:
            await bot.edit_message_text(
                text=get_room_status(game),
                chat_id=game.room_id,
                message_id=game.lobby_message,
                reply_markup=keyboards.get_room_markup(game),
            )
        else:
            game.journal.add(
                "üç∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, "
                f"{message.from_user.mention_html()}!"
            )
            await game.journal.send_journal()


@router.message(Command("leave"))
async def leave_player(
    message: Message,
    sm: SessionManager,
    game: UnoGame | None,
    player: Player | None,
) -> None:
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–≥—Ä—ã."""
    if game is None or player is None:
        raise NoGameInChatError

    try:
        sm.leave(player)
    except NoGameInChatError:
        await message.answer("üëÄ –í–∞—Å –Ω–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ—ë.")

    if game.started:
        game.journal.add(
            text=(f"üç∞ –õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥ –∑–∞ {game.player.name}.")
        )
        await game.journal.send_journal()
    else:
        status_message = f"{NOT_ENOUGH_PLAYERS}\n\n{end_game_message(game)}"
        sm.remove(str(message.chat.id))
        await message.answer(status_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
# ======================


@router.callback_query(F.data == "join")
async def join_callback(
    query: CallbackQuery, sm: SessionManager, game: UnoGame | None
) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É."""
    if game is None or not isinstance(query.message, Message):
        raise NoGameInChatError

    try:
        sm.join(
            str(query.message.chat.id),
            BaseUser(str(query.from_user.id), query.from_user.mention_html()),
        )
    except LobbyClosedError:
        await query.message.answer(get_closed_room_message(game))
    except AlreadyJoinedError:
        await query.answer("üç∞ –í—ã —É–∂–µ –∏ –±–µ–∑ —Ç–æ–≥–æ —Å –Ω–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ.")
    except DeckEmptyError:
        await query.message.answer(
            "üëÄ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –Ω–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–ª—è –≤–∞—Å –∫–∞—Ä—Ç."
        )
    else:
        await query.message.edit_text(
            text=get_room_status(game),
            reply_markup=keyboards.get_room_markup(game),
        )


@router.callback_query(F.data == "take", NowPlaying())
async def take_cards_call(
    query: CallbackQuery,
    sm: SessionManager,
    game: UnoGame,
    player: Player,
) -> None:
    """–ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã."""
    take_counter = game.take_counter
    if game.player == player:
        game.journal.add("üÉè –í—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ <b>–≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã</b>.")
    else:
        game.set_current_player(player)
        game.journal.add(f"üÉè –ù–µ–∫—Ç–æ {player.name} —Ä–µ—à–∏–ª–∏ <b>–≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã</b>.")

    player.take_cards()
    if len(player.game.deck.cards) == 0:
        game.journal.add(
            "üÉè –í –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞.",
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤–∑—è–ª –∫–∞—Ä—Ç—ã, —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ö–æ–¥
    if isinstance(game.deck.top, TakeCard | TakeFourCard) and take_counter:
        game.journal.set_actions(None)
        game.next_turn()
        game.journal.add(f"üç∞ <b>–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥–∏—Ç</b>: {game.player.name}")
    else:
        game.journal.add(f"‚òï {game.player.name} <b>–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç</b>.")
    await game.journal.send_journal()


@router.callback_query(F.data == "shot", NowPlaying())
async def shotgun_call(
    query: CallbackQuery,
    sm: SessionManager,
    game: UnoGame,
    player: Player,
) -> None:
    """–ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã."""
    res = player.shotgun()
    game.journal.set_actions(None)
    if not res:
        game.take_counter = round(game.take_counter * 1.5)
        game.journal.add(
            "‚ú® –ù–∞ —Å–µ–π —Ä–∞–∑ <b>–≤–∞–º –ø–æ–≤–µ–∑–ª–æ</b> –∏ —Ä–µ–≤–æ–ª—å–≤–µ—Ä –Ω–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª.",
        )
        game.journal.add(
            f"üÉè –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç <b>{game.take_counter} –∫–∞—Ä—Ç</b>!\n",
        )
        await game.journal.send_journal()
        if game.player != player:
            game.set_current_player(player)
        game.next_turn()
        game.state = GameState.SHOTGUN
    else:
        if game.player == player:
            game.journal.add("üò¥ –ù–∞ —ç—Ç–æ–º –∏–≥—Ä–∞ –¥–ª—è –≤–∞—Å <b>–∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å</b>.\n")
        else:
            game.journal.add(f"üò¥ {player.name} –ø–æ–ø–∞–ª –ø–æ–¥ –ø—É–ª—é..\n")

        await game.journal.send_journal()
        sm.leave(player)

    if game.started:
        game.journal.add(f"üç∞ –õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Å–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–∏—Ç {game.player.name}.")
        await game.journal.send_journal()
    else:
        status = end_game_message(game)
        sm.remove(game.room_id)
        if isinstance(query.message, Message):
            await query.message.edit_text(text=status)
