"""–†–µ–¥–∞–∫—Ç–æ—Ä –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª."""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message

from mau.game.game import UnoGame
from maubot import filters, keyboards

router = Router(name="Game rules")

ROOM_SETTINGS = (
    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã</b>:\n\n"
    "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã.\n"
    "–û–Ω–∏ –ø—Ä–∏–≤–Ω–æ—Å—è—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞.\n\n"
    "–ü—É–Ω–∫—Ç—ã –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ üåü <b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ —É–∂–µ –Ω–∞–≤–æ–¥—è—Ç —Å—É–µ—Ç—É."
)


@router.message(Command("rules"), filters.ActivePlayer())
async def send_rules_list(message: Message, game: UnoGame) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
    await message.answer(
        ROOM_SETTINGS, reply_markup=keyboards.get_rules_markup(game.rules)
    )


@router.callback_query(F.data == "room_rules", filters.ActivePlayer())
async def get_rules_call(query: CallbackQuery, game: UnoGame) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
    if isinstance(query.message, Message):
        await query.message.answer(
            ROOM_SETTINGS,
            reply_markup=keyboards.get_rules_markup(game.rules),
        )
    await query.answer()


class RulesCallback(CallbackData, prefix="rule"):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫."""

    index: int


@router.callback_query(RulesCallback.filter(), filters.ActivePlayer())
async def edit_room_rules_call(
    query: CallbackQuery, callback_data: RulesCallback, game: UnoGame
) -> None:
    """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
    game.rules.toggle(callback_data.index)
    if isinstance(query.message, Message):
        await query.message.edit_text(
            ROOM_SETTINGS,
            reply_markup=keyboards.get_rules_markup(game.rules),
        )
    await query.answer()
