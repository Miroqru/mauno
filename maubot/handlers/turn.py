"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞.

–≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Inline query –∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""

import re

from aiogram import Bot, F, Router
from aiogram.types import CallbackQuery, ChosenInlineResult, InlineQuery
from loguru import logger

from mau.card import CardColor, card_from_str
from mau.enums import GameState
from mau.game import UnoGame
from mau.player import Player
from mau.session import SessionManager
from mau.telegram.player import call_take_cards
from mau.telegram.turn import process_turn
from maubot import keyboards

router = Router(name="Turn")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========


@router.inline_query()
async def inline_handler(
    query: InlineQuery, game: UnoGame | None, player: Player | None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É.

    –ó–¥–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –≤–∞—à–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏.
    """
    if game is None or player is None:
        result = keyboards.NO_GAME_QUERY
    else:
        result = keyboards.get_hand_query(game.get_player(query.from_user.id))

    await query.answer(result, cache_time=1, is_personal=True)


@router.chosen_inline_result()
async def process_card_handler(
    result: ChosenInlineResult,
    game: UnoGame | None,
    player: Player | None,
    bot: Bot,
    sm: SessionManager,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –±–æ—Ç–∞."""
    logger.info("Process result {} in game {}", result, game)
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –∏–≥—Ä—ã
    # –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    if any(
        player is None,
        game is None,
        result.result_id in ("status", "nogame"),
        re.match(r"status:\d", result.result_id),
    ):
        return

    if player != game.player:
        game.journal.add(f"üòà {player.name} –≤–º–µ—à–∞–ª—Å—è –≤ –∏–≥—Ä—É.")
        game.set_current_player(player)

    if result.result_id == "pass":
        game.next_turn()

    elif result.result_id == "take":
        call_take_cards(player)

    elif result.result_id == "bluff":
        await player.call_bluff()

    change_color = re.match(r"color:([0-3])", result.result_id)
    if change_color is not None:
        game.choose_color(CardColor(int(change_color.groups()[0])))

    select_player = re.match(r"select_player:(\d)", result.result_id)
    if select_player is not None:
        other_player = game.players[int(select_player.groups()[0])]
        if game.state == GameState.TWIST_HAND:
            player_hand = len(player.hand)
            other_hand = len(other_player.hand)
            game.journal.add(
                f"ü§ù {player.name} ({player_hand} –∫–∞—Ä—Ç) "
                f"–∏ {other_player.name} ({other_hand} –∫–∞—Ä—Ç) "
                "–æ–±–º–µ–Ω—è–ª–∏—Å—å —Ä—É–∫–∞–º–∏.\n"
            )
            player.twist_hand(other_player)
        else:
            game.journal.add("üçª –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ.")

    card = card_from_str(result.result_id)
    if card is not None:
        process_turn(game, card, player)

    if game.started and game.state == GameState.NEXT:
        game.journal.add(
            "üåÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥"
            if game.player == player
            else f"üç∞ <b>–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥–∏—Ç</b>: {game.player.name}"
        )
        if game.journal.reply_markup is None:
            game.journal.set_actions(keyboards.TURN_MARKUP)

    await game.journal.send_journal()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
# ======================


@router.callback_query(F.data.regexp(r"color:([0-3])").as_("color"))
async def choose_color_call(  # noqa
    query: CallbackQuery,
    game: UnoGame | None,
    player: Player | None,
    color: re.Match[str],
    sm: SessionManager,
    bot: Bot,
) -> None:
    """–ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    if game is None or player is None:
        return await query.answer("üçâ –ê –≤—ã —Ç–æ—á–Ω–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç–µ?")
    if not game.rules.ahead_of_curve and game.player != player:
        return await query.answer("üçâ –ê –≤—ã —Ç–æ—á–Ω–æ —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç–µ?")

    color = CardColor(int(color.groups()[0]))
    game.journal.add(f"üé® –Ø –≤—ã–±–∏—Ä–∞—é —Ü–≤–µ—Ç.. {color}\n")
    game.journal.set_actions(None)
    await game.journal.send_journal()
    game.choose_color(color)

    if game.started:
        game.journal.add(f"üç∞ <b>–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥–∏—Ç</b>: {game.player.name}")
        game.journal.set_actions(keyboards.TURN_MARKUP)
        await game.journal.send_journal()
    else:
        sm.remove(player.game.chat_id)

    return await query.answer(f"üé® –í—ã –≤—ã–±—Ä–∞–ª–∏ {color}.")


@router.callback_query(
    F.data.regexp(r"select_player:(\d)").as_("index"),
)
async def select_player_call(
    query: CallbackQuery,
    game: UnoGame | None,
    player: Player | None,
    index: re.Match[int],
) -> None:
    """–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏."""
    if game is None or player is None:
        return await query.answer("üçâ –ê –≤—ã —Ç–æ—á–Ω–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç–µ?")
    if not game.rules.ahead_of_curve and game.player != player:
        return await query.answer("üçâ –ê –≤—ã —Ç–æ—á–Ω–æ —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç–µ?")

    other_player = game.players[int(index.groups()[0])]
    if game.state == GameState.TWIST_HAND:
        player_hand = len(player.hand)
        other_hand = len(other_player.hand)
        game.journal.add(
            f"ü§ù {player.name} ({player_hand} –∫–∞—Ä—Ç) "
            f"–∏ {other_player.name} ({other_hand} –∫–∞—Ä—Ç) "
            "–æ–±–º–µ–Ω—è–ª–∏—Å—å —Ä—É–∫–∞–º–∏.\n"
        )
        game.journal.set_actions(None)
        await game.journal.send_journal()
        player.twist_hand(other_player)
    else:
        game.journal.add("üçª –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ.")

    game.journal.add(f"üç∞ <b>–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥–∏—Ç</b>: {game.player.name}")
    game.journal.set_actions(keyboards.TURN_MARKUP)
    await game.journal.send_journal()
