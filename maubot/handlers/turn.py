"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞.

–≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Inline query –∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""

import re

from aiogram import F, Router
from aiogram.types import CallbackQuery, ChosenInlineResult, InlineQuery

from mau.deck.card import MauCard
from mau.enums import CardColor, GameState
from mau.game.game import MauGame
from mau.game.player import Player
from maubot import markups
from maubot.filters import NowPlaying

router = Router(name="Turn")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========


@router.inline_query()
async def inline_handler(
    query: InlineQuery, game: MauGame | None, player: Player | None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ä—Ç–∞–º–∏."""
    if game is None or player is None or query.from_user is None:
        await query.answer(
            [markups.NO_GAME_QUERY],
            cache_time=0,
            is_personal=True,
        )
    else:
        await query.answer(
            list(markups.hand_query(player)),
            cache_time=0,
            is_personal=True,
        )


@router.chosen_inline_result(NowPlaying())
async def process_card_handler(
    result: ChosenInlineResult, game: MauGame, player: Player
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –±–æ—Ç–∞."""
    card = MauCard.unpack(result.result_id)
    if card is not None:
        game.process_turn(card, player)


# TODO: –í–µ—Ä–Ω—É—Ç—å –º–µ—Ç–æ–¥—ã –Ω–∞ –º–µ—Å—Ç–æ


@router.callback_query(F.data == "next", NowPlaying())
async def call_next(query: CallbackQuery, game: MauGame) -> None:
    """–ü–µ—Ä–µ–¥–∞—ë—Ç —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É."""
    game.next_turn()


@router.callback_query(F.data == "take", NowPlaying())
async def call_take(query: CallbackQuery, player: Player) -> None:
    """–ë–µ—Ä—ë—Ç –∫–∞—Ä—Ç—ã."""
    player.call_take_cards()


@router.callback_query(F.data == "bluff", NowPlaying())
async def call_bluff(query: CallbackQuery, player: Player) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å."""
    player.call_bluff()


@router.callback_query(F.data.regexp(r"color:(\d)").as_("color"), NowPlaying())
async def choose_color_call(
    query: CallbackQuery, game: MauGame, color: re.Match[str]
) -> None:
    """–ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    card_color = CardColor(int(color.groups()[0]))
    game.choose_color(card_color)
    await query.answer(f"üé® –í—ã –≤—ã–±—Ä–∞–ª–∏ {card_color}.")


@router.callback_query(
    F.data.regexp(r"select_player:(\d+)").as_("user_id"), NowPlaying()
)
async def select_player_call(
    query: CallbackQuery, game: MauGame, player: Player, user_id: re.Match[str]
) -> None:
    """–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏."""
    other_player = game.pm.get(user_id.groups()[0])
    if game.state == GameState.TWIST_HAND:
        player.twist_hand(other_player)

    elif query.message is not None:
        query.message.answer("üçª –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ.")

    await query.answer(f"ü§ù –í—ã –æ–±–º–µ–Ω—è–ª–∏—Å—å —Å {other_player}.")
