"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞.

–≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Inline query –∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""

import re

from aiogram import Bot, F, Router
from aiogram.types import CallbackQuery, ChosenInlineResult, InlineQuery
from loguru import logger

from maubot import keyboards, messages
from maubot.stickers import from_str
from maubot.uno.card import (
    BaseCard,
    CardColor,
    CardType,
    TakeCard,
    TakeFourCard,
)
from maubot.uno.enums import GameState
from maubot.uno.game import UnoGame
from maubot.uno.player import Player
from maubot.uno.session import SessionManager

router = Router(name="Turn")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ======================

async def take_card(player: Player) -> str | None:
    """–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    logger.info("{} take cards", player)
    take_counter = player.game.take_counter
    player.take_cards()
    if len(player.game.deck.cards) == 0:
        player.game.journal.add("üÉè –í –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞.")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã, —Ç–æ –æ–Ω –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥
    if (isinstance(player.game.deck.top, (TakeCard, TakeFourCard))
        and take_counter
    ):
        await player.game.next_turn()
    else:
        player.game.state = GameState.NEXT
    return None

def call_bluff(player: Player) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
    logger.info("{} call bluff", player)
    bluff_player = player.game.bluff_player
    if bluff_player.bluffing:
        player.game.journal.add((
            "üîé <b>–ó–∞–º–µ—á–µ–Ω –±–ª–µ—Ñ</b>!\n"
            f"{bluff_player.user.first_name} –ø–æ–ª—É—á–∞–µ—Ç "
            f"{player.game.take_counter} –∫–∞—Ä—Ç."
        ))
        bluff_player.take_cards()

        if len(player.game.deck.cards) == 0:
            player.game.journal.add("üÉè –í –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç.")
    else:
        player.game.take_counter += 2
        player.game.journal.add((
            f"üé© {bluff_player.user.first_name} <b>–ß–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫</b>!\n"
            f"{player.user.first_name} –ø–æ–ª—É—á–∞–µ—Ç "
            f"{player.game.take_counter} –∫–∞—Ä—Ç.\n"
        ))
        player.take_cards()
        if len(player.game.deck.cards) == 0:
            player.game.journal.add("üÉè –í –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç.")

async def play_card(player: Player, card: BaseCard) -> str:
    """–†–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–æ—à–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É."""
    logger.info("Push {} from {}", card, player.user.id)
    player.hand.remove(card)
    await player.game.process_turn(card)
    player.game.journal.set_markup(None)

    if len(player.hand) == 1:
        player.game.journal.add("üåü UNO!\n")

    if len(player.hand) == 0:
        player.game.journal.add(f"üëë {player.user.first_name} –ø–æ–±–µ–¥–∏–ª(–∞)!\n")
        player.game.winners.append(player)
        await player.game.remove_player(player.user.id)

        if not player.game.started:
            player.game.journal.add(messages.end_game_message(player.game))

    elif card.cost == 2 and player.game.rules.twist_hand:
        player.game.journal.add(
            f"‚ú® {player.name} –ó–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è c –∫–µ–º –æ–±–º–µ–Ω—è—Ç—å—Å—è."
        )
        player.game.journal.set_markup(keyboards.select_player_markup(player))

    elif (player.game.rules.rotate_cards
        and player.game.deck.top.cost == 0
        and len(player.hand) > 0
    ):
        player.game.journal.add((
            "ü§ù –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ–±–º–µ–Ω—è–ª–∏—Å—å –∫–∞—Ä—Ç–∞–º–∏ –ø–æ –∫—Ä—É–≥—É.\n"
            f"{messages.get_room_players(player.game)}"
        ))

    if card.card_type in (
        CardType.TAKE_FOUR, CardType.CHOOSE_COLOR
    ):
        player.game.journal.add(
            f"‚ú® {player.name} –ó–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è –æ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞."
        )
        player.game.journal.set_markup(keyboards.COLOR_MARKUP)

    if (player.game.rules.random_color
        or player.game.rules.choose_random_color
        or player.game.rules.auto_choose_color
    ):
        player.game.journal.add(
            f"üé® –Ø –≤—ã–±–∏—Ä–∞—é —Ü–≤–µ—Ç.. {player.game.deck.top.color}"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========

@router.inline_query()
async def inline_handler(query: InlineQuery,
    game: UnoGame | None,
    player: Player | None
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç."""
    if game is None or player is None:
        result = keyboards.NO_GAME_QUERY
    else:
        result = keyboards.get_hand_query(game.get_player(query.from_user.id))

    await query.answer(result, cache_time=1, is_personal=True)

@router.chosen_inline_result()
async def process_card_handler(result: ChosenInlineResult,
    game: UnoGame | None,
    player: Player | None,
    bot: Bot,
    sm: SessionManager
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –±–æ—Ç–∞."""
    logger.info("Process result {} in game {}", result, game)
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –∏–≥—Ä—ã
    # –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    if (player is None
        or game is None
        or result.result_id in ("status", "nogame")
        or re.match(r"status:\d", result.result_id)
    ):
        return

    game.journal.set_markup(keyboards.TURN_MARKUP)

    if result.result_id == "pass":
        await game.next_turn()

    elif result.result_id == "take":
        if game.rules.take_until_cover and game.take_counter == 0:
            game.take_counter = game.deck.count_until_cover()
            game.journal.add(f"üç∑ –±–µ—Ä—É {game.take_counter} –∫–∞—Ä—Ç.\n")
        if not game.rules.shotgun and not game.rules.single_shotgun:
            await take_card(player)
        elif game.take_counter <= 2 or game.state == GameState.SHOTGUN:
            await take_card(player)
        else:
            current = (
                game.shotgun_current if game.rules.single_shotgun
                else player.shotgun_current
            )
            game.journal.add((
                "üíº –£ –Ω–∞—Å –¥–ª—è –í–∞—Å –µ—Å—Ç—å <b>–¥–µ–ª–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>!\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ <b>–≤–∑—è—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã</b> "
                "–∏–ª–∏ –∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å <b>–≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –∏–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞</b>.\n"
                "–ï—Å–ª–∏ –≤–∞–º –ø–æ–≤–µ–∑—ë—Ç, —Ç–æ –∫–∞—Ä—Ç—ã –±—É–¥–µ—Ç –±—Ä–∞—Ç—å —É–∂–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫.\n"
                f"üî´ –ò–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ —Å—Ç—Ä–µ–ª—è–ª–∏ {current} / 8 —Ä–∞–∑\n."
            ))
            game.journal.set_markup(keyboards.SHOTGUN_REPLY)

    elif result.result_id == "bluff":
        call_bluff(player)
        await game.journal.send_journal()
        await game.next_turn()

    change_color = re.match(r"color:([0-3])", result.result_id)
    if change_color is not None:
        await game.choose_color(CardColor(int(change_color.groups()[0])))

    select_player = re.match(r"select_player:(\d)", result.result_id)
    if select_player is not None:
        other_player = game.players[int(select_player.groups()[0])]
        if game.state == GameState.TWIST_HAND:
            player_hand = len(player.hand)
            other_hand = len(other_player.hand)
            game.journal.add((
                f"ü§ù {player.user.first_name} ({player_hand} –∫–∞—Ä—Ç) "
                f"–∏ {other_player.user.first_name} ({other_hand} –∫–∞—Ä—Ç) "
                "–æ–±–º–µ–Ω—è–ª–∏—Å—å —Ä—É–∫–∞–º–∏.\n"
            ))
            player.twist_hand(other_player)
        else:
            game.journal.add("üçª –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ.")

    card = from_str(result.result_id)
    if card is not None:
        await play_card(player, card)

    if game.state == GameState.NEXT:
        game.journal.add(
            f"üç∞ <b>–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥–∏—Ç</b>: {game.player.name}"
        )
        if game.journal.reply_markup is None:
            game.journal.set_markup(keyboards.TURN_MARKUP)
    await game.journal.send_journal()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
# ======================

@router.callback_query(F.data.regexp(r"color:([0-3])").as_("color"))
async def choose_color_call( # noqa
    query: CallbackQuery,
    game: UnoGame | None,
    player: Player | None,
    color: re.Match[str],
    sm: SessionManager,
    bot: Bot
):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    if game is None or player is None:
        return await query.answer("üçâ –ê –≤—ã —Ç–æ—á–Ω–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç–µ?")
    if not game.rules.ahead_of_curve and game.player != player:
        return await query.answer("üçâ –ê –≤—ã —Ç–æ—á–Ω–æ —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç–µ?")

    color = CardColor(int(color.groups()[0]))
    game.journal.add(f"üé® –Ø –≤—ã–±–∏—Ä–∞—é —Ü–≤–µ—Ç.. {color}\n")
    game.journal.set_markup(None)
    await game.journal.send_journal()
    await game.choose_color(color)

    if game.started:
        game.journal.add(
            f"üç∞ <b>–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥–∏—Ç</b>: {game.player.name}"
        )
        game.journal.set_markup(keyboards.TURN_MARKUP)
        await game.journal.send_journal()
    else:
        sm.remove(player.game.chat_id)

    return await query.answer(f"üé® –í—ã –≤—ã–±—Ä–∞–ª–∏ {color}.")

@router.callback_query(F.data.regexp(r"select_player:(\d)").as_("index"),)
async def select_player_call(query: CallbackQuery,
    game: UnoGame | None,
    player: Player | None,
    index: re.Match[int]
):
    if game is None or player is None:
        return await query.answer("üçâ –ê –≤—ã —Ç–æ—á–Ω–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç–µ?")
    if not game.rules.ahead_of_curve and game.player != player:
        return await query.answer("üçâ –ê –≤—ã —Ç–æ—á–Ω–æ —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç–µ?")

    other_player = game.players[int(index.groups()[0])]
    if game.state == GameState.TWIST_HAND:
        player_hand = len(player.hand)
        other_hand = len(other_player.hand)
        game.journal.add((
            f"ü§ù {player.user.first_name} ({player_hand} –∫–∞—Ä—Ç) "
            f"–∏ {other_player.user.first_name} ({other_hand} –∫–∞—Ä—Ç) "
            "–æ–±–º–µ–Ω—è–ª–∏—Å—å —Ä—É–∫–∞–º–∏.\n"
        ))
        game.journal.set_markup(None)
        await game.journal.send_journal()
        player.twist_hand(other_player)
    else:
        game.journal.add("üçª –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ.")

    game.journal.add(
        f"üç∞ <b>–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥–∏—Ç</b>: {game.player.name}"
    )
    game.journal.set_markup(keyboards.TURN_MARKUP)
    await game.journal.send_journal()
