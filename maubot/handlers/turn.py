"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞.

–≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Inline query –∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""

import re

from aiogram import F, Router
from aiogram.types import (
    CallbackQuery,
    ChosenInlineResult,
    InlineQuery,
)
from loguru import logger

from mau.card import CardColor, card_from_str
from mau.enums import GameState
from mau.game import UnoGame
from mau.player import Player
from maubot import keyboards
from maubot.events.journal import MessageJournal
from maubot.filters import NowPlaying

router = Router(name="Turn")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========


@router.inline_query()
async def inline_handler(
    query: InlineQuery, game: UnoGame | None, player: Player | None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É.

    –ó–¥–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –≤–∞—à–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏.
    """
    if game is None or player is None or query.from_user is None:
        res = keyboards.NO_GAME_QUERY
    else:
        res = keyboards.get_hand_query(player)

    await query.answer(list(res), cache_time=1, is_personal=True)


@router.chosen_inline_result()
async def process_card_handler(
    result: ChosenInlineResult,
    game: UnoGame | None,
    player: Player | None,
    journal: MessageJournal,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –±–æ—Ç–∞."""
    logger.info("Process result {} in game {}", result, game)
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –∏–≥—Ä—ã
    # –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    if (
        player is None
        or game is None
        or result.result_id in ("status", "nogame")
        or re.match(r"status:\d", result.result_id)
    ):
        return None

    if player != game.player:
        game.set_current_player(player)

    elif result.result_id == "pass":
        game.next_turn()

    elif result.result_id == "take":
        player.call_take_cards()

    elif result.result_id == "bluff":
        player.call_bluff()

    change_color = re.match(r"color:([0-3])", result.result_id)
    if change_color is not None:
        game.choose_color(CardColor(int(change_color.groups()[0])))

    select_player = re.match(r"select_player:(\d)", result.result_id)
    if select_player is not None:
        if game.state == GameState.TWIST_HAND:
            other_player = game.players[int(select_player.groups()[0])]
            player.twist_hand(other_player)
        else:
            journal.add("üçª –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ.")

    card = card_from_str(result.result_id)
    if card is not None:
        game.process_turn(card, player)

        # if game.started and game.state == GameState.NEXT:
        #     journal.add("üåÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥")
    # await journal.send()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
# ======================


@router.callback_query(
    F.data.regexp(r"color:([0-3])").as_("color"), NowPlaying()
)
async def choose_color_call(
    query: CallbackQuery,
    game: UnoGame,
    player: Player,
    color: re.Match[str],
    journal: MessageJournal,
) -> None:
    """–ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    card_color = CardColor(int(color.groups()[0]))

    # –ü–æ—Å–∫–æ–ª—å–∫—É —Ü–≤–µ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω, –Ω–∞–º –±—ã —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    game.choose_color(card_color)
    await query.answer(f"üé® –í—ã –≤—ã–±—Ä–∞–ª–∏ {card_color}.")


@router.callback_query(
    F.data.regexp(r"select_player:(\d)").as_("index"), NowPlaying()
)
async def select_player_call(
    query: CallbackQuery,
    game: UnoGame,
    player: Player,
    index: re.Match,
    journal: MessageJournal,
) -> None:
    """–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏."""
    other_player = game.players[int(index.groups()[0])]
    if game.state == GameState.TWIST_HAND:
        player.twist_hand(other_player)
    else:
        journal.add("üçª –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ.")
        await journal.send_journal()

    await query.answer(f"ü§ù –í—ã –æ–±–º–µ–Ω—è–ª–∏—Å—å —Å {other_player}.")
