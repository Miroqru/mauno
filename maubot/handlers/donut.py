"""–î–æ–Ω–∞—Ç –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞."""

from pathlib import Path

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import LabeledPrice, Message, PreCheckoutQuery
from loguru import logger
from pydantic import BaseModel

router = Router(name="Donut")

DONUT_PATH = Path("donuts.json")


class Donut(BaseModel):
    """–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏—Ö –ø—Ä–æ–µ–∫—Ç."""

    name: str
    amount: int


class DonutInfo(BaseModel):
    """–§–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–æ–Ω–∞–º–∏.

    –í –±—É–¥—É—â–µ–º —ç—Ç–æ –≤—Å—ë –∫–æ–Ω–µ—á–Ω–æ –∂–µ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –Ω–∞ —Å–∫–æ—Ä—É—é —Ä—É–∫—É.
    """

    version: int
    donuts: dict[int, Donut]


def _load_donuts(donut_path: Path) -> DonutInfo:
    if not donut_path.exists():
        logger.warning("{} not found", donut_path)
        return DonutInfo(version=1, donuts={})

    with donut_path.open() as f:
        return DonutInfo.model_validate_json(f.read())


def _write_donuts(donut_path: Path, donuts: DonutInfo) -> None:
    with donut_path.open("W") as f:
        f.write(donuts.model_dump_json())


def _donut_leaders(donut_info: DonutInfo) -> str:
    res = ""
    for i, d in enumerate(
        sorted(donut_info.donuts.values(), key=lambda d: d.amount, reverse=True)
    ):
        res += f"{i + 1}. {d.name}: {d.amount}üåü"

    return res


def _donut_message(donut_info: DonutInfo) -> str:
    return (
        "üç© <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
        "–ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–π –≤–∞–º –∏–≥—Ä—ã. ‚ù§Ô∏è"
        f"{_donut_leaders(donut_info)}\n"
        f"üåü /support_mau —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç –∑–≤—ë–∑–¥–æ—á–∫–∞–º–∏."
    )


@router.message(Command("donut"))
async def donut_info(message: Message) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–∞—Ö."""
    donut_info = _load_donuts(DONUT_PATH)
    await message.answer(_donut_message(donut_info))


@router.message(Command("support_mau"))
async def donut_invoice(message: Message) -> None:
    """–°–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É."""
    await message.answer_invoice(
        title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞",
        description="–¢–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã—Ä–∞–∑–∏—Ç—å –≤–∞—à—É ‚ù§Ô∏è –∫ Mau",
        payload="mau_supporter",
        currency="XTR",
        prices=[LabeledPrice(label="XTR", amount=10)],
    )


@router.pre_checkout_query()
async def call_checkout(event: PreCheckoutQuery) -> None:
    """–ü—Ä–æ–≤–æ–¥–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é."""
    await event.answer(True)


@router.message(F.successful_payment)
async def finish_payment(message: Message, bot: Bot) -> None:
    """–°–æ–æ–±—â–∞–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–µ."""
    if message.from_user is None:
        raise ValueError("user can`t be None")

    donut_info = _load_donuts(DONUT_PATH)
    user = donut_info.donuts.get(
        message.from_user.id,
        Donut(name=message.from_user.mention_html(), amount=0),
    )
    user.amount += 10
    donut_info.donuts[message.from_user.id] = user
    _write_donuts(DONUT_PATH, donut_info)

    await message.answer(
        "‚ù§Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É Mau!\n"
        "–ë—É–¥–µ–º –∏ –¥–∞–ª—å—à–µ —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –Ω–æ–≤—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏. ‚ú®"
    )
