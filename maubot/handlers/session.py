"""–£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏.

–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã, —É–¥–∞–ª—è—Ç—å –∏—Ö, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏—è–º–∏, —Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ
–≤ —Ä–æ—É—Ç–µ—Ä `player`.
"""

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message
from loguru import logger

from mau.exceptions import (
    GameNotStartedError,
    NoGameInChatError,
    NotEnoughPlayersError,
    NotGameOwnerError,
)
from mau.game import UnoGame
from mau.messages import end_game_message
from mau.session import SessionManager
from maubot import keyboards, messages
from maubot.config import config, stickers
from maubot.messages import HELP_MESSAGE, NO_ROOM_MESSAGE, NOT_ENOUGH_PLAYERS

router = Router(name="Sessions")

ROOM_SETTINGS = (
    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã</b>:\n\n"
    "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã.\n"
    "–û–Ω–∏ –ø—Ä–∏–≤–Ω–æ—Å—è—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞.\n\n"
    "–ü—É–Ω–∫—Ç—ã –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ üåü <b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ —É–∂–µ –Ω–∞–≤–æ–¥—è—Ç —Å—É–µ—Ç—É."
)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========


@router.message(Command("game"))
async def create_game(
    message: Message, sm: SessionManager, game: UnoGame | None, bot: Bot
) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É."""
    if message.chat.type == "private":
        await message.answer("üëÄ –ò–≥—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")

    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø–æ–ª—É—á–∞–µ–º –µ—ë
    if game is None:
        game = sm.create(str(message.chat.id))
        # FIXME: –ò –≤–Ω–æ–≤—å game.owner
        game.start_player = message.from_user  # type: ignore
    elif game.started:
        game.journal.add(
            "üîë –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –µ—ë –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å. (/stop)"
        )
        await game.journal.send_journal()

    lobby_message = await message.answer(
        messages.get_room_status(game),
        reply_markup=keyboards.get_room_markup(game),
    )
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–±–±–∏, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
    game.lobby_message = lobby_message.message_id


@router.message(Command("start"))
async def start_gama(message: Message, game: UnoGame | None) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    if message.chat.type == "private":
        await message.answer(HELP_MESSAGE)
        return None

    if game is None:
        await message.answer(NO_ROOM_MESSAGE)

    elif game.started:
        await message.answer("üëÄ –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å —Ä–∞–Ω–µ–µ.")

    elif len(game.players) < config.min_players:
        raise NotEnoughPlayersError

    else:
        try:
            await message.delete()
        except Exception as e:
            logger.warning("Unable to delete message: {}", e)
            await message.answer(
                "üßπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
            )

        game.start()
        await message.answer_sticker(stickers.normal[game.deck.top.to_str()])
        game.journal.add(messages.get_new_game_message(game))
        await game.journal.send_journal()


@router.message(Command("stop"))
async def stop_gama(
    message: Message, game: UnoGame | None, sm: SessionManager
) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É."""
    if game is None or message.from_user is None:
        raise NoGameInChatError

    player = game.get_player(str(message.from_user.id))
    if player is None or not player.is_owner:
        raise NotGameOwnerError

    sm.remove(game.room_id)
    await message.answer(
        "üßπ –ò–≥—Ä–∞ –±—ã–ª–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ-–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
        f"{end_game_message(game)}"
    )


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–º–Ω–∞—Ç—ã
# ==============================


@router.message(Command("open"))
async def open_gama(
    message: Message, game: UnoGame | None, sm: SessionManager
) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."""
    if game is None or message.from_user is None:
        raise NoGameInChatError

    player = game.get_player(str(message.from_user.id))
    if player is None or not player.is_owner:
        raise NotGameOwnerError

    game.open = True
    await message.answer(
        "üç∞ –ö–æ–º–Ω–∞—Ç–∞ <b>–æ—Ç–∫—Ä—ã—Ç–∞</b>!\n –ª—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –∑–∞–π—Ç–∏ (/join)."
    )


@router.message(Command("close"))
async def close_gama(
    message: Message, game: UnoGame | None, sm: SessionManager
) -> None:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."""
    if game is None or message.from_user is None:
        raise NoGameInChatError

    player = game.get_player(str(message.from_user.id))
    if player is None or not player.is_owner:
        raise NotGameOwnerError

    game.open = False
    await message.answer(
        "üîí –ö–æ–º–Ω–∞—Ç–∞ <b>–∑–∞–∫—Ä—ã—Ç–∞</b>.\n–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤–∞–º –¥–æ–∏–≥—Ä–∞—Ç—å."
    )


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
# ================================


@router.message(Command("kick"))
async def kick_player(
    message: Message, game: UnoGame | None, sm: SessionManager
) -> None:
    """–í—ã–∫–∏–¥—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã."""
    if game is None or message.from_user is None:
        raise NoGameInChatError

    if not game.started:
        raise GameNotStartedError

    player = game.get_player(str(message.from_user.id))
    if player is None or not player.is_owner:
        raise NotGameOwnerError

    if (
        message.reply_to_message is None
        or message.reply_to_message.from_user is None
    ):
        raise NoGameInChatError(
            "üç∑ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–≥–æ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å."
        )

    kicked_user = message.reply_to_message.from_user
    game.remove_player(str(kicked_user.id))

    game.journal.add(
        # TODO: game.owner —Ç—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
        f"üßπ {game.start_player.mention_html()} –≤—ã–≥–Ω–∞–ª "  # type: ignore
        f"{kicked_user} –∏–∑ –∏–≥—Ä—ã –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n"
    )
    if game.started:
        game.journal.add(f"üç∞ –õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥ –∑–∞ {game.player.name}.")
        await game.journal.send_journal()
    else:
        await message.answer(
            f"{NOT_ENOUGH_PLAYERS}\n\n{end_game_message(game)}"
        )
        sm.remove(message.chat.id)


@router.message(Command("skip"))
async def skip_player(
    message: Message, game: UnoGame | None, sm: SessionManager
) -> None:
    """–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞ –¥–æ–ª–≥–æ–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ."""
    # FIXME: –ß—É—Ç–∫–∞ –∫–æ—Å—Ç—ã–ª—å–Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    if game is None or message.from_user is None:
        raise NoGameInChatError

    if not game.started:
        raise GameNotStartedError

    player = game.get_player(str(message.from_user.id))
    if player is None or not player.is_owner:
        raise NotGameOwnerError

    game.take_counter += 1
    game.player.take_cards()
    skip_player = game.player
    game.next_turn()
    game.journal.add(
        f"‚òï {skip_player.name} –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ–∏ –∫—É.. –∫–∞—Ä—Ç—ã.\n"
        "–ú—ã –∏—Ö –Ω–∞—à–ª–∏ –∏ –¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –∫–∞—Ä—Ç –æ—Ç –Ω–∞—Å.\n"
        "üç∞ –õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥ –∑–∞ "
        f"{game.player.name}."
    )
    await game.journal.send_journal()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
# ===================


@router.callback_query(F.data == "start_game")
async def start_game_call(query: CallbackQuery, game: UnoGame | None) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    if not isinstance(query.message, Message):
        raise ValueError("Query.message is not a Message")

    try:
        await query.message.delete()
    except Exception as e:
        logger.warning("Unable to delete message: {}", e)
        await query.message.answer(
            "üëÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
        )

    if game is None:
        raise NoGameInChatError

    game.start()
    await query.message.answer_sticker(stickers.normal[game.deck.top.to_str()])

    game.journal.add(messages.get_new_game_message(game))
    await game.journal.send_journal()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
# =================


@router.message(Command("settings"))
async def settings_menu(message: Message, game: UnoGame | None) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
    if game is None:
        raise NoGameInChatError

    await message.answer(
        ROOM_SETTINGS, reply_markup=keyboards.get_settings_markup(game.rules)
    )


@router.callback_query(F.data == "room_settings")
async def settings_menu_call(
    query: CallbackQuery, game: UnoGame | None
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
    if game is None:
        raise NoGameInChatError

    if isinstance(query.message, Message):
        await query.message.edit_text(
            ROOM_SETTINGS,
            reply_markup=keyboards.get_settings_markup(game.rules),
        )
    await query.answer()


class SettingsCallback(CallbackData, prefix="set"):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫."""

    key: str
    value: bool


@router.callback_query(SettingsCallback.filter())
async def edit_room_settings_call(
    query: CallbackQuery, callback_data: SettingsCallback, game: UnoGame | None
) -> None:
    """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
    if game is None:
        raise NoGameInChatError

    getattr(game.rules, callback_data.key).status = callback_data.value
    if isinstance(query.message, Message):
        await query.message.edit_text(
            ROOM_SETTINGS,
            reply_markup=keyboards.get_settings_markup(game.rules),
        )
    await query.answer()
