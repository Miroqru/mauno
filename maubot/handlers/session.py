"""–£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏.

–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã, —É–¥–∞–ª—è—Ç—å –∏—Ö, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏—è–º–∏, —Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ
–≤ —Ä–æ—É—Ç–µ—Ä `player`.
"""

import random

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message
from loguru import logger

from mau.card import CardColor
from mau.exceptions import NoGameInChatError, NotEnoughPlayersError
from mau.game import UnoGame
from mau.player import BaseUser
from mau.session import SessionManager
from maubot import filters, keyboards
from maubot.config import config
from maubot.events.journal import MessageChannel
from maubot.messages import HELP_MESSAGE, NO_ROOM_MESSAGE

router = Router(name="Sessions")

ROOM_SETTINGS = (
    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã</b>:\n\n"
    "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã.\n"
    "–û–Ω–∏ –ø—Ä–∏–≤–Ω–æ—Å—è—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞.\n\n"
    "–ü—É–Ω–∫—Ç—ã –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ üåü <b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ —É–∂–µ –Ω–∞–≤–æ–¥—è—Ç —Å—É–µ—Ç—É."
)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========


@router.message(Command("game"))
async def create_game(
    message: Message, sm: SessionManager, game: UnoGame | None, bot: Bot
) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É."""
    if message.chat.type == "private":
        await message.answer("üëÄ –ò–≥—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")

    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø–æ–ª—É—á–∞–µ–º –µ—ë
    if game is None:
        if message.from_user is None:
            raise ValueError("None User tries create new game")

        game = sm.create(
            str(message.chat.id),
            BaseUser(
                str(message.from_user.id), message.from_user.mention_html()
            ),
        )

    if game.started:
        await message.answer(
            "üîë –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –µ—ë –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å. (/stop)"
        )


@router.message(Command("start"))
async def start_gama(message: Message, game: UnoGame | None) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    if message.chat.type == "private":
        await message.answer(HELP_MESSAGE)
        return None

    if game is None:
        await message.answer(NO_ROOM_MESSAGE)

    elif game.started:
        await message.answer("üëÄ –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å —Ä–∞–Ω–µ–µ.")

    elif len(game.players) < config.min_players:
        raise NotEnoughPlayersError

    else:
        try:
            await message.delete()
        except Exception as e:
            logger.warning("Unable to delete message: {}", e)
            await message.answer(
                "üßπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
            )

        game.start()


@router.message(Command("stop"), filters.GameOwner())
async def stop_gama(
    message: Message, game: UnoGame, sm: SessionManager
) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É."""
    sm.remove(game.room_id)


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–º–Ω–∞—Ç—ã
# ==============================


@router.message(Command("open"), filters.GameOwner())
async def open_gama(message: Message, game: UnoGame) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."""
    game.open = True
    await message.answer(
        "üç∞ –ö–æ–º–Ω–∞—Ç–∞ <b>–æ—Ç–∫—Ä—ã—Ç–∞</b>!\n –ª—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –∑–∞–π—Ç–∏ (/join)."
    )


@router.message(Command("close"), filters.GameOwner())
async def close_gama(message: Message, game: UnoGame) -> None:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."""
    game.open = False
    await message.answer(
        "üîí –ö–æ–º–Ω–∞—Ç–∞ <b>–∑–∞–∫—Ä—ã—Ç–∞</b>.\n–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤–∞–º –¥–æ–∏–≥—Ä–∞—Ç—å."
    )


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
# ================================


@router.message(Command("kick"), filters.GameOwner())
async def kick_player(
    message: Message, game: UnoGame, sm: SessionManager, channel: MessageChannel
) -> None:
    """–í—ã–∫–∏–¥—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã."""
    if (
        message.reply_to_message is None
        or message.reply_to_message.from_user is None
    ):
        raise ValueError(
            "üç∑ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–≥–æ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å."
        )

    kicked_user = message.reply_to_message.from_user
    kick_player = game.get_player(str(kicked_user.id))
    channel.add(
        f"üßπ {game.owner.name} –≤—ã–≥–Ω–∞–ª "
        f"{kicked_user} –∏–∑ –∏–≥—Ä—ã –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n"
    )
    await channel.send()
    if kick_player is not None:
        sm.leave(kick_player)


@router.message(Command("skip"), filters.GameOwner())
async def skip_player(
    message: Message, game: UnoGame, channel: MessageChannel
) -> None:
    """–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞ –¥–æ–ª–≥–æ–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ."""
    game.take_counter += 1
    game.player.take_cards()
    skip_player = game.player
    channel.add(
        f"‚òï {skip_player.name} –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ–∏ –∫—É.. –∫–∞—Ä—Ç—ã.\n"
        "–ú—ã –∏—Ö –Ω–∞—à–ª–∏ –∏ –¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –∫–∞—Ä—Ç –æ—Ç –Ω–∞—Å.\n"
    )
    # –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–æ–µ, —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —á—ë—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞
    # –¢–æ–≥–¥–∞ –µ–π –Ω—É–∂–Ω–æ –¥–∞—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ü–≤–µ—Ç
    if game.deck.top.color == CardColor.BLACK:
        game.choose_color(CardColor(random.randint(0, 3)))
    else:
        game.next_turn()
    await channel.send()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
# ===================


@router.callback_query(F.data == "start_game")
async def start_game_call(query: CallbackQuery, game: UnoGame | None) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    if not isinstance(query.message, Message):
        raise ValueError("Query.message is not a Message")

    try:
        await query.message.delete()
    except Exception as e:
        logger.warning("Unable to delete message: {}", e)
        await query.message.answer(
            "üëÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
        )

    if game is None:
        raise NoGameInChatError

    game.start()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
# =================


@router.message(Command("rules"), filters.ActivePlayer())
async def send_rules_list(message: Message, game: UnoGame) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
    await message.answer(
        ROOM_SETTINGS, reply_markup=keyboards.get_rules_markup(game.rules)
    )


@router.callback_query(F.data == "room_rules", filters.ActivePlayer())
async def get_rules_call(query: CallbackQuery, game: UnoGame) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
    if isinstance(query.message, Message):
        await query.message.answer(
            ROOM_SETTINGS,
            reply_markup=keyboards.get_rules_markup(game.rules),
        )
    await query.answer()


class RulesCallback(CallbackData, prefix="rule"):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫."""

    key: str
    value: bool


@router.callback_query(RulesCallback.filter(), filters.ActivePlayer())
async def edit_room_rules_call(
    query: CallbackQuery, callback_data: RulesCallback, game: UnoGame
) -> None:
    """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
    getattr(game.rules, callback_data.key).status = callback_data.value
    if isinstance(query.message, Message):
        await query.message.edit_text(
            ROOM_SETTINGS,
            reply_markup=keyboards.get_rules_markup(game.rules),
        )
    await query.answer()
