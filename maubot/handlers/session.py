"""–£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏.

–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã, —É–¥–∞–ª—è—Ç—å –∏—Ö, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏—è–º–∏, —Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ
–≤ —Ä–æ—É—Ç–µ—Ä `player`.
"""

import random

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from mau.enums import CardColor
from mau.game.game import MauGame
from mau.game.player import BaseUser
from mau.session import SessionManager
from maubot import filters, markups
from maubot.events.journal import MessageChannel
from maubot.messages import game_status

router = Router(name="Sessions")


# –ö–æ–≥–¥–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è/–Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
def _not_enough_message(min_players: int) -> str:
    return (
        f"üå≥ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤</b> (–º–∏–Ω–∏–º—É–º {min_players}) –¥–ª—è "
        "–∏–≥—Ä—ã.\n"
        "–ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë <b>–Ω–µ –Ω–∞—á–∞–ª–∞—Å—å</b> –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π "
        "/join —á—Ç–æ–±—ã –∑–∞–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É.\n"
        "üç∞ –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ /game."
    )


@router.message(Command("game"))
async def create_game(
    message: Message,
    sm: SessionManager,
    game: MauGame | None,
    channel: MessageChannel,
) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É."""
    if message.chat.type == "private":
        await message.answer("üëÄ –ò–≥—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")

    if game is not None:
        if game.started:
            await message.answer(
                "üîë –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –µ—ë –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å. (/stop)"
            )
        else:
            channel.lobby_message = None
            await channel.send_lobby(
                game_status(game),
                reply_markup=markups.lobby_markup(game),
            )
        return

    if message.from_user is None:
        raise ValueError("None User tries create new game")

    # TODO: –£–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫—É—é –∏–≥—Ä—É —Å–æ–∑–¥–∞–≤–∞—Ç—å
    sm.create(
        str(message.chat.id),
        BaseUser(
            str(message.from_user.id),
            message.from_user.first_name,
            message.from_user.mention_html(),
        ),
    )


@router.message(Command("start_game"), filters.ActiveGame())
async def start_gama(message: Message, game: MauGame) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    if message.chat.type == "private":
        return None

    elif game.started:
        await message.answer("üëÄ –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å —Ä–∞–Ω–µ–µ.")

    elif len(game.pm) < game.min_players:
        await message.answer(_not_enough_message(game.min_players))

    else:
        game.start()


@router.message(Command("stop"), filters.GameOwner())
async def stop_gama(message: Message, game: MauGame) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É."""
    game.end()
    if message.from_user is None:
        raise ValueError("User can`t be none to stop game")

    mention = message.from_user.mention_html()
    await message.answer(f"‚ö° {mention} –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É.")


@router.message(Command("open"), filters.GameOwner())
async def open_gama(message: Message, game: MauGame) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."""
    game.open = True
    await message.answer(
        "üç∞ –ö–æ–º–Ω–∞—Ç–∞ <b>–æ—Ç–∫—Ä—ã—Ç–∞</b>!\n –ª—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –∑–∞–π—Ç–∏ (/join)."
    )


@router.message(Command("close"), filters.GameOwner())
async def close_gama(message: Message, game: MauGame) -> None:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."""
    game.open = False
    await message.answer(
        "üîí –ö–æ–º–Ω–∞—Ç–∞ <b>–∑–∞–∫—Ä—ã—Ç–∞</b>.\n–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤–∞–º –¥–æ–∏–≥—Ä–∞—Ç—å."
    )


@router.message(Command("kick"), filters.GameOwner())
async def kick_player(
    message: Message, game: MauGame, channel: MessageChannel
) -> None:
    """–í—ã–∫–∏–¥—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã."""
    if (
        message.reply_to_message is None
        or message.reply_to_message.from_user is None
    ):
        raise ValueError(
            "üç∑ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–≥–æ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å."
        )

    kicked_user = message.reply_to_message.from_user
    kick_player = game.pm.get_or_none(str(kicked_user.id))
    if kick_player is not None:
        channel.add(
            f"üßπ {game.owner.name} –≤—ã–≥–Ω–∞–ª "
            f"{kick_player.mention} –∏–∑ –∏–≥—Ä—ã –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n"
        )
        game.leave_player(kick_player)
        await channel.send()


@router.message(Command("skip"), filters.GameOwner())
async def skip_player(
    message: Message, game: MauGame, channel: MessageChannel
) -> None:
    """–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞ –¥–æ–ª–≥–æ–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ."""
    game.take_counter += 1
    game.player.take_cards()
    skip_player = game.player
    channel.add(
        f"‚òï {skip_player.mention} –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ–∏ –∫—É.. –∫–∞—Ä—Ç—ã.\n"
        "–ú—ã –∏—Ö –Ω–∞—à–ª–∏ –∏ –¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –∫–∞—Ä—Ç –æ—Ç –Ω–∞—Å.\n"
    )
    # –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–æ–µ, —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —á—ë—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞
    # –¢–æ–≥–¥–∞ –µ–π –Ω—É–∂–Ω–æ –¥–∞—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ü–≤–µ—Ç
    if game.deck.top.color == game.deck.wild_color:
        game.choose_color(CardColor(random.randint(0, 3)))
    else:
        game.next_turn()


@router.callback_query(F.data == "new_game")
async def create_game_call(
    query: CallbackQuery, sm: SessionManager, game: MauGame | None
) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É."""
    if query.message is None or query.from_user is None:
        raise ValueError("None User tries create new game")

    if game is not None:
        await query.answer("üîë –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –µ—ë –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
        return

    game = sm.create(
        str(query.message.chat.id),
        BaseUser(
            str(query.from_user.id),
            query.from_user.first_name,
            query.from_user.mention_html(),
        ),
    )
    await query.answer("–ü–æ–Ω–µ—Å–ª–∞—Å—å!")


@router.callback_query(F.data == "start_game", filters.ActiveGame())
async def start_game_call(query: CallbackQuery, game: MauGame) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    if not isinstance(query.message, Message):
        raise ValueError("Query.message is not a Message")
    game.start()
