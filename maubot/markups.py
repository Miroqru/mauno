"""–û–±—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞.

–í —Ç–æ–∏ —á–∏—Å–ª–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Inline Query.
"""

from collections.abc import Iterator

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.types import InlineQueryResultArticle as InlineArticle
from aiogram.types import InlineQueryResultPhoto as InlinePhoto
from aiogram.types import InputTextMessageContent as InputText

from mau.deck.behavior import WildTakeBehavior
from mau.enums import GameState
from mau.game.game import MauGame
from mau.game.player import Player
from mau.game.player_manager import PlayerManager
from maubot.messages import game_status

# –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø—Ä–æ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å inline —Ä–µ–∂–∏–º –±–æ—Ç–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
NO_GAME_QUERY = InlineArticle(
    id="nogame",
    title="–í —á–∞—Ç–µ –µ—â—ë –Ω–µ—Ç –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã",
    input_message_content=InputText(
        message_text=(
            "‚òï –°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã.\n"
            "–ê –ø–æ—Å–ª–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. "
        )
    ),
)


SHOTGUN_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–í–∑—è—Ç—å üÉè", callback_data="shot_take"),
            InlineKeyboardButton(text="üî´ –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å", callback_data="shot"),
        ]
    ]
)

NEW_GAME_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üç™ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")]
    ]
)


def hand_query(player: Player) -> Iterator[InlinePhoto]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–æ–≤—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏."""
    player_cards = player.cover_cards()
    for i, card in enumerate(player_cards.cover):
        yield InlinePhoto(
            id=f"{card.pack()}:{i}",
            photo_url=f"https://mau.miroq.ru/card/next/{card.pack()}/cover",
            thumbnail_url=f"https://mau.miroq.ru/card/next/{card.pack()}/cover",
            photo_width=64,
            photo_height=128,
            description=card.pack(),
        )

    for i, card in enumerate(player_cards.uncover):
        yield InlinePhoto(
            id=f"status:{i}",
            photo_url=f"https://mau.miroq.ru/card/next/{card.pack()}/uncover",
            thumbnail_url=f"https://mau.miroq.ru/card/next/{card.pack()}/uncover",
            input_message_content=InputText(
                message_text=game_status(player.game),
            ),
            photo_width=64,
            photo_height=128,
            description=card.pack(),
        )


# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# =================


def select_player(pm: PlayerManager, skip_button: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞.

    –°–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏ —Å–∫–æ–ª—å–∫–æ —É –Ω–µ–≥–æ —Å–µ–π—á–∞—Å –∫–∞—Ä—Ç.
    """
    res = [
        [
            InlineKeyboardButton(
                text=f"{pl.name} ({len(pl.hand)} üÉè)",
                callback_data=f"select_player:{pl.user_id}",
            )
        ]
        for i, pl in pm.iter_others()
    ]

    if skip_button:
        res.append(
            [InlineKeyboardButton(text="üç∑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="next")]
        )

    return InlineKeyboardMarkup(inline_keyboard=res)


def lobby_markup(game: MauGame) -> InlineKeyboardMarkup:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–æ–π.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–µ–π.
    –ê —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª.
    """
    buttons = [
        [
            InlineKeyboardButton(text="ü™Ñ –ü—Ä–∞–≤–∏–ª–∞", callback_data="room_rules"),
            InlineKeyboardButton(text="üÉè –ö–æ–ª–æ–¥–∞", callback_data="deck_edit"),
        ],
        [
            InlineKeyboardButton(text="‚òï –ó–∞–π—Ç–∏", callback_data="join"),
        ],
    ]
    if len(game.pm) >= game.min_players:
        buttons[0].append(
            InlineKeyboardButton(
                text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game"
            )
        )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def turn_markup(game: MauGame) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ö–æ–¥–∞."""
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text="üéÆ –†–∞–∑—ã–≥—Ä–∞—Ç—å üÉè",
                switch_inline_query_current_chat="",
            )
        ]
    ]

    if game.state == GameState.TAKE:
        inline_keyboard.append(
            [InlineKeyboardButton(text="üçì –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="next")]
        )

    else:
        inline_keyboard.append(
            [InlineKeyboardButton(text="üÉè –≤–∑—è—Ç—å", callback_data="take")]
        )

    if (
        isinstance(game.deck.top.behavior, WildTakeBehavior)
        and game.take_counter
    ):
        inline_keyboard[-1].append(
            InlineKeyboardButton(text="üç∑ –±–ª–µ—Ñ—É–µ—à—å", callback_data="bluff")
        )

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


def color_markup(game: MauGame) -> InlineKeyboardMarkup:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞."""
    inline_keyboard: list[list[InlineKeyboardButton]] = []
    for c in game.deck.colors:
        if c.value % 4 == 0:
            inline_keyboard.append([])
        inline_keyboard[-1].append(
            InlineKeyboardButton(text=c.emoji, callback_data=f"color:{c.value}")
        )

    inline_keyboard.append(
        [
            InlineKeyboardButton(
                text="üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã", switch_inline_query_current_chat=""
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
