"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–≤–∏–∂–∫–∞."""

import asyncio
from collections import deque
from collections.abc import Awaitable, Callable
from typing import Any, TypeVar

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from loguru import logger

from mau.card import BaseCard
from mau.events import BaseEventHandler, Event, GameEvents
from maubot.config import stickers

FuncType = Callable[..., Any] | Callable[..., Awaitable[Any]]

T = TypeVar("T", bound=FuncType)


class EventRouter:
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º."""

    def __init__(self) -> None:
        self._handlers: dict[GameEvents, FuncType] = {}

    async def process(self, event: Event, journal: "MessageJournal") -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—à–µ–¥—à–µ–µ —Å–æ–±—ã—Ç–∏–µ."""
        logger.debug(event)
        handler = self._handlers.get(event.event_type)

        if handler is None:
            logger.warning("No handler on: {}", event)
            return None

        await handler(event, journal)

    def handler(self, event: GameEvents) -> Callable:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π."""

        def wrapper(func: T) -> T:
            self._handlers[event] = func
            return func

        return wrapper


class MessageJournal(BaseEventHandler):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–º–∫–∞—Ö Telegram –±–æ—Ç–∞."""

    def __init__(self, bot: Bot, room_id: str, router: EventRouter) -> None:
        self.lobby_message: Message | None = None
        self.room_message: Message | None = None
        self.message_queue: deque[str] = deque(maxlen=5)

        self.default_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üéÆ –†–∞–∑—ã–≥—Ä–∞—Ç—å üÉè",
                        switch_inline_query_current_chat="",
                    )
                ]
            ]
        )

        self.markup: InlineKeyboardMarkup | None = self.default_markup
        self._loop = asyncio.get_running_loop()
        self.bot = bot
        self.room_id = room_id
        self.router = router

    def push(self, event: Event) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è."""
        logger.debug(event)
        self._loop.create_task(self.router.process(event, self))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    # ==================

    async def send_lobby(
        self, message: str, reply_markup: InlineKeyboardMarkup | None = None
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–ª–æ–±–±–∏ –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã."""
        if self.lobby_message is None:
            lobby_message = await self.bot.send_message(
                text=message,
                chat_id=self.room_id,
                reply_markup=reply_markup,
            )
            if isinstance(lobby_message, Message):
                self.lobby_message = lobby_message

        else:
            await self.lobby_message.edit_text(
                text=message,
                reply_markup=reply_markup,
            )

    async def send_message(self, text: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É."""
        return await self.bot.send_message(
            chat_id=self.room_id,
            text=text,
            reply_markup=self.markup,
        )

    async def send(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∂—É—Ä–Ω–∞–ª –≤ —á–∞—Ç.

        –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –∂—É—Ä–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂—É—Ä–Ω–∞–ª–æ–º.
        –ï—Å–ª–∏ –∂–µ –∂—É—Ä–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∂—É—Ä–Ω–∞–ª –æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Ö–æ–¥–µ –∏–≥—Ä–æ–∫–∞.
        """
        if len(self.message_queue) == 0:
            return None

        if self.room_message is None:
            self.room_message = await self.send_message(
                text="\n".join(self.message_queue),
            )
        else:
            await self.room_message.edit_text(
                text="\n".join(self.message_queue),
                reply_markup=self.markup,
            )

    async def send_card(self, card: BaseCard) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –∫–∞–∫ —Å—Ç–∏–∫–µ—Ä."""
        await self.bot.send_sticker(
            chat_id=self.room_id,
            sticker=stickers.normal[card.to_str()],
        )

    async def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –±—É—Ñ–µ—Ä —Å–æ–±—ã—Ç–∏–π –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        self.markup = self.default_markup
        self.lobby_message = None
        if self.room_message is not None:
            await self.room_message.delete()
            self.room_message = None

    def set_markup(self, markup: InlineKeyboardMarkup | None) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
        self.markup = markup

    def add(self, text: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.message_queue.append(text)
