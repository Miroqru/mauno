"""–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–≤–∏–∂–∫–∞."""

from mau.enums import GameEvents
from maubot import keyboards, messages
from maubot.config import sm, stickers
from maubot.events.journal import EventContext, EventRouter
from maubot.messages import plural_form

er = EventRouter()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Å—Å–∏–π
# =================


@er.handler(event=GameEvents.SESSION_START)
async def start_session(ctx: EventContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–±–±–∏, –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –≤ —á–∞—Ç–µ."""
    lobby_message = (
        f"{messages.get_room_status(ctx.event.game)}\n\n"
        f"üî• {ctx.event.player.name}, –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É!"
    )
    await ctx.send_lobby(
        message=lobby_message,
        reply_markup=keyboards.get_room_markup(ctx.event.game),
    )


@er.handler(event=GameEvents.SESSION_END)
async def end_session(ctx: EventContext) -> None:
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π."""
    ctx.journal.remove_channel(ctx.event.room_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
# ======================


@er.handler(event=GameEvents.GAME_JOIN)
async def join_player(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    if ctx.event.game.started:
        ctx.add(f"üç∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, {ctx.event.player.name}!")
        await ctx.send()
    else:
        lobby_message = (
            f"{messages.get_room_status(ctx.event.game)}\n\n"
            f"üëã {ctx.event.player.name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É!"
        )
        await ctx.send_lobby(
            message=lobby_message,
            reply_markup=keyboards.get_room_markup(ctx.event.game),
        )


@er.handler(event=GameEvents.GAME_LEAVE)
async def leave_player(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã–≤–∞—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã –¥–æ –µ—ë –Ω–∞—á–∞–ª–∞
    if ctx.event.data == "win":
        ctx.add(f"üëë {ctx.event.player.name} –ø–æ–±–µ–¥–∏–ª(–∞)!\n")
    else:
        ctx.add(f"üëã {ctx.event.player.name} –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä—É!\n")

    if not ctx.event.game.started:
        ctx.set_markup(None)

    await ctx.send()


@er.handler(event=GameEvents.GAME_UNO)
async def say_uno(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    ctx.add("üåü UNO!\n")
    await ctx.send()


@er.handler(event=GameEvents.PLAYER_TAKE)
async def player_take_cards(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑—è–ª N –∫–∞—Ä—Ç."""
    if not ctx._channel.lobby_message:
        ctx.add(
            f"üÉè {ctx.event.player.name} –ë–µ—Ä—ë—Ç {ctx.event.data} "
            f"{plural_form(int(ctx.event.data), ('–∫–∞—Ä—Ç—É', '–∫–∞—Ä—Ç—ã', '–∫–∞—Ä—Ç'))}"
        )
        await ctx.send()


@er.handler(event=GameEvents.GAME_ROTATE)
async def rotate_cards(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    ctx.add("üåÄ –û–±–º–µ–Ω–∏–≤–∞–µ–º—Å—è —Ä—É—á–∫–∞–º–∏")
    ctx.add(messages.get_room_players(ctx.event.game))
    await ctx.send()


@er.handler(event=GameEvents.GAME_SELECT_COLOR)
async def select_card_color(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    ctx.add(f"üé® –Ø –≤—ã–±–∏—Ä–∞—é.. {ctx.event.data}!")
    await ctx.send()


@er.handler(event=GameEvents.GAME_START)
async def start_game(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    sticker = stickers.normal[ctx.event.game.deck.top.to_str()]
    await ctx.send_card(sticker)
    await ctx.send_message(messages.get_new_game_message(ctx.event.game))


@er.handler(event=GameEvents.GAME_END)
async def end_game(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    ctx.add(messages.end_game_message(ctx.event.game))
    ctx.set_markup(None)
    sm.remove(ctx.event.room_id)
    await ctx.send()


@er.handler(event=GameEvents.GAME_SELECT_PLAYER)
async def twist_hand(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    other_player = ctx.event.game.get_player(ctx.event.data)
    if other_player is None:
        ctx.add("üç∫ –ö—É–¥–∞ –ø–æ–¥–µ–≤–∞–ª—Å—è –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫?")
    else:
        ctx.add(
            f"ü§ù {ctx.event.player.name} ({len(other_player.hand)} –∫–∞—Ä—Ç) "
            f"–∏ {other_player.name} ({len(ctx.event.player.hand)} –∫–∞—Ä—Ç) "
            "–æ–±–º–µ–Ω—è–ª–∏—Å—å —Ä—É–∫–∞–º–∏.\n"
        )
    await ctx.send()


@er.handler(event=GameEvents.PLAYER_BLUFF)
async def player_bluffing(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    bluff_flag, take_counter = ctx.event.data.split(";")
    bluff_player = ctx.event.game.bluff_player
    if bluff_player is not None and bluff_flag == "true":
        ctx.add(
            "üîé <b>–ó–∞–º–µ—á–µ–Ω –±–ª–µ—Ñ</b>!\n"
            f"{bluff_player.name} –ø–æ–ª—É—á–∞–µ—Ç "
            f"{take_counter} –∫–∞—Ä—Ç."
        )
    else:
        if bluff_player is None:
            bluff_header = "üé© <b>–ù–∏–∫—Ç–æ –Ω–µ –±–ª–µ—Ñ–æ–≤–∞–ª</b>!\n"
        else:
            bluff_header = f"üé© {bluff_player.name} <b>–ß–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫</b>!\n"

        name = ctx.event.player.name
        ctx.add(f"{bluff_header}{name} –ø–æ–ª—É—á–∞–µ—Ç {take_counter} –∫–∞—Ä—Ç.\n")

    await ctx.send()


@er.handler(event=GameEvents.GAME_STATE)
async def set_game_state(ctx: EventContext) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    if ctx.event.data == "shotgun" and (
        ctx.event.game.rules.shotgun.status
        or ctx.event.game.rules.single_shotgun.status
    ):
        current = (
            ctx.event.game.shotgun_current
            if ctx.event.game.rules.single_shotgun.status
            else ctx.event.player.shotgun_current
        )
        ctx.add(
            f"üç∑ –±–µ—Ä—É {ctx.event.game.take_counter} –∫–∞—Ä—Ç.\n"
            "üíº –£ –Ω–∞—Å –¥–ª—è –í–∞—Å –µ—Å—Ç—å <b>–¥–µ–ª–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>!\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ <b>–≤–∑—è—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã</b> "
            "–∏–ª–∏ –∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å <b>–≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –∏–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞</b>.\n"
            "–ï—Å–ª–∏ –≤–∞–º –ø–æ–≤–µ–∑—ë—Ç, —Ç–æ –∫–∞—Ä—Ç—ã –±—É–¥–µ—Ç –±—Ä–∞—Ç—å —É–∂–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫.\n"
            f"üî´ –ò–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ —Å—Ç—Ä–µ–ª—è–ª–∏ {current} / 8 —Ä–∞–∑\n."
        )
        ctx.set_markup(keyboards.SHOTGUN_KEYBOARD)

    elif ctx.event.data == "twist_hand":
        ctx.add(f"‚ú® {ctx.event.player.name} –ó–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è c –∫–µ–º –æ–±–º–µ–Ω—è—Ç—å—Å—è.")
        ctx.set_markup(keyboards.select_player_markup(ctx.event.game))

    elif ctx.event.data == "choose_color":
        ctx.add(f"‚ú® {ctx.event.player.name} –ó–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è –æ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞..")
        ctx.set_markup(keyboards.SELECT_COLOR)

    await ctx.send()


@er.handler(event=GameEvents.GAME_TURN)
async def next_turn(ctx: EventContext) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    await ctx.clear()
    cards = len(ctx.event.player.hand)
    ctx.add(
        f"\nüç∞ <b>—Ö–æ–¥</b>: {ctx.event.game.player.name} "
        f"(üÉè {cards} {plural_form(cards, ('–∫–∞—Ä—Ç—É', '–∫–∞—Ä—Ç—ã', '–∫–∞—Ä—Ç'))})"
    )
    await ctx.send()
