"""–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–≤–∏–∂–∫–∞."""

from loguru import logger

from mau.enums import GameEvents, GameState
from mau.events import Event
from maubot import keyboards, messages
from maubot.config import sm, stickers
from maubot.events.journal import EventRouter, MessageChannel
from maubot.messages import plural_form

er = EventRouter()


@er.event(GameEvents.SESSION_START)
async def start_session(event: Event, chan: MessageChannel) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–±–±–∏, –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –≤ —á–∞—Ç–µ."""
    lobby_message = (
        f"{messages.get_room_status(event.game)}\n\n"
        f"üî• {event.player.name}, –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É!"
    )
    await chan.send_lobby(
        message=lobby_message,
        reply_markup=keyboards.get_room_markup(event.game),
    )


@er.event(GameEvents.SESSION_END)
async def end_session(event: Event, chan: MessageChannel) -> None:
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π."""
    sm._event_handler.remove_channel(event.game.room_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
# ======================


@er.event(GameEvents.GAME_START)
async def start_game(event: Event, chan: MessageChannel) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã."""
    await chan.send_lobby(
        message=messages.get_room_status(event.game),
        reply_markup=None,
    )
    await chan.clear()
    await chan.send_card(stickers.normal[event.game.deck.top.to_str()])
    chan.add(messages.get_new_game_message(event.game))
    await chan.send()


@er.event(GameEvents.GAME_END)
async def end_game(event: Event, chan: MessageChannel) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –≤ —á–∞—Ç–µ."""
    sm.remove(event.game.room_id)
    chan.add(messages.end_game_message(event.game))
    chan.set_markup(keyboards.NEW_GAME_MARKUP)
    await chan.send()


@er.event(GameEvents.GAME_JOIN)
async def join_player(event: Event, chan: MessageChannel) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∏–≥—Ä—É."""
    if not event.game.started:
        lobby_message = (
            f"{messages.get_room_status(event.game)}\n\n"
            f"üëã {event.player.name} –∑–∞—à—ë–ª –≤ –∫–æ–º–Ω–∞—Ç—É!"
        )
        await chan.send_lobby(
            message=lobby_message,
            reply_markup=keyboards.get_room_markup(event.game),
        )
        return

    chan.add(f"üç∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, {event.player.name}!")
    await chan.send()


@er.event(GameEvents.GAME_LEAVE)
async def leave_player(event: Event, chan: MessageChannel) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã."""
    if chan.lobby_message is not None and not event.game.started:
        lobby_message = (
            f"{messages.get_room_status(event.game)}\n\n"
            f"üëã {event.player.name} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É!"
        )
        await chan.send_lobby(
            message=lobby_message,
            reply_markup=keyboards.get_room_markup(event.game),
        )
        return

    if event.data == "win":
        chan.add(f"üëë {event.player.name} –∑–∞–∫–æ–Ω—á–∏–ª(–∞)!\n")
    else:
        chan.add(f"üëã {event.player.name} –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É.")

    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã–≤–∞—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã –¥–æ –µ—ë –Ω–∞—á–∞–ª–∞
    if not event.game.started:
        chan.set_markup(None)


@er.event(GameEvents.GAME_SELECT_COLOR)
async def select_card_color(event: Event, chan: MessageChannel) -> None:
    """–ö–∞–∫–æ–π –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –±—ã–ª –≤—ã–±—Ä–∞–Ω –¥–ª—è –∫–∞—Ä—Ç—ã."""
    chan.add(f"üé® –Ø –≤—ã–±–∏—Ä–∞—é {event.data}!")


@er.event(GameEvents.GAME_SELECT_PLAYER)
async def twist_hand(event: Event, chan: MessageChannel) -> None:
    """–°–æ–æ–±—â–∞–µ—Ç –æ–± –æ–±–º–µ–Ω–µ –∫–∞—Ä—Ç–∞–º–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    other_player = event.game.pm.get_or_none(event.data)
    if other_player is None:
        chan.add("üç∫ –ö—É–¥–∞ –ø–æ–¥–µ–≤–∞–ª—Å—è –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫?")
        return

    # –°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è, –ø–æ—Ç–æ–º—É —Ç–∞–∫ —Å—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç—ã
    chan.add(
        f"ü§ù {event.player.name} ({len(other_player.hand)} –∫–∞—Ä—Ç) "
        f"–∏ {other_player.name} ({len(event.player.hand)} –∫–∞—Ä—Ç) "
        "–æ–±–º–µ–Ω—è–ª–∏—Å—å –∫–∞—Ä—Ç–∞–º–∏.\n"
    )


@er.event(GameEvents.GAME_TURN)
async def next_turn(event: Event, chan: MessageChannel) -> None:
    """–ù–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞."""
    await chan.clear()
    cards = len(event.player.hand)
    chan.add(
        f"\nüç∞ <b>—Ö–æ–¥</b>: {event.game.player.name} "
        f"(üÉè {cards} {plural_form(cards, ('–∫–∞—Ä—Ç—É', '–∫–∞—Ä—Ç—ã', '–∫–∞—Ä—Ç'))})"
    )
    await chan.send()


@er.event(GameEvents.GAME_ROTATE)
async def rotate_cards(event: Event, chan: MessageChannel) -> None:
    """–í—Å–µ –∏–≥—Ä–æ–∫–∞ –æ–±–º–µ–Ω—è–ª–∏—Å—å –∫–∞—Ä—Ç–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç —É –∏–≥—Ä–æ–∫–æ–≤."""
    chan.add("üåÄ –û–±–º–µ–Ω–∏–≤–∞–µ–º—Å—è <b>–∫–∞—Ä—Ç–∞–º–∏</b>!")
    chan.add(messages.get_room_players(event.game))


@er.event(GameEvents.GAME_STATE)
async def update_game_state(event: Event, chan: MessageChannel) -> None:
    """–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    state = GameState(int(event.data))
    if state == GameState.SHOTGUN:
        current = (
            event.game.shotgun.cur
            if event.game.rules.single_shotgun.status
            else event.player.shotgun.cur
        )
        chan.add(
            "üíº <b>–£ –Ω–∞—Å –¥–ª—è –í–∞—Å –¥–µ–ª–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>!\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ <b>–≤–∑—è—Ç—å {event.game.take_counter} –∫–∞—Ä—Ç</b> "
            "–∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å <b>–≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –∏–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞</b>.\n"
            "–ï—Å–ª–∏ –≤–∞–º –ø–æ–≤–µ–∑—ë—Ç, —Ç–æ –∫–∞—Ä—Ç—ã –±—É–¥–µ—Ç –±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫.\n"
            f"üî´ –ò–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ —Å—Ç—Ä–µ–ª—è–ª–∏ {current} / 8 —Ä–∞–∑\n."
        )
        chan.set_markup(keyboards.SHOTGUN_KEYBOARD)

    elif state == GameState.TWIST_HAND:
        chan.add("‚ú® –° –∫–µ–º –±—ã –æ–±–º–µ–Ω—è—Ç—å—Å—è –∫–∞—Ä—Ç–∞–º–∏ ..")
        chan.set_markup(keyboards.select_player_markup(event.game))

    elif state == GameState.CHOOSE_COLOR:
        chan.add("‚ú® –ö–∞–∫–æ–π –±—ã –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç ...")
        chan.set_markup(keyboards.SELECT_COLOR)

    else:
        logger.warning("Unprocessed state {}", state)
        return

    await chan.send()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞
# =========================


@er.event(GameEvents.PLAYER_UNO)
async def say_uno(event: Event, chan: MessageChannel) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –≤ —Ä—É–∫–µ."""
    chan.add("\nüåü <b>UNO!</b>")


@er.event(GameEvents.PLAYER_TAKE)
async def player_take_cards(event: Event, chan: MessageChannel) -> None:
    """–û–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑—è–ª –∫–∞—Ä—Ç—ã."""
    if chan.lobby_message is not None:
        return

    if event.player == event.game.player:
        chan.add(
            f"üÉè –ë–µ—Ä—É {event.data} "
            f"{plural_form(int(event.data), ('–∫–∞—Ä—Ç—É', '–∫–∞—Ä—Ç—ã', '–∫–∞—Ä—Ç'))}"
        )
    else:
        chan.add(
            f"üÉè {event.player.name} –ë–µ—Ä—ë—Ç {event.data} "
            f"{plural_form(int(event.data), ('–∫–∞—Ä—Ç—É', '–∫–∞—Ä—Ç—ã', '–∫–∞—Ä—Ç'))}"
        )

    await chan.send()


@er.event(GameEvents.PLAYER_BLUFF)
async def player_bluffing(event: Event, chan: MessageChannel) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –±–ª–µ—Ñ."""
    if event.game.bluff_player is None:
        chan.add("üé© <b>–ù–∏–∫—Ç–æ –Ω–µ –±–ª–µ—Ñ–æ–≤–∞–ª</b>!")
        return

    player, bluff_flag = event.game.bluff_player
    if player is not None and bluff_flag:
        chan.add("üîé <b>–ó–∞–º–µ—á–µ–Ω –±–ª–µ—Ñ</b>!")
    else:
        chan.add(f"üé© {player.name} <b>–ß–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫</b>!")


@er.event(GameEvents.PLAYER_INTERVENED)
async def on_intervention(event: Event, chan: MessageChannel) -> None:
    """–ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –≤–º–µ—à–∏–≤–∞–µ—Ç—Å—è –≤ –∏–≥—Ä—É –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥."""
    chan.add(f"‚ö° {event.player.name} <b>–Ω–∞–≤—ë–ª —Å—É–µ—Ç—ã!</b>")
    await chan.send()
