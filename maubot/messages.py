"""–í—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –æ–±—â–µ–º –¥–æ—Å—Ç—É–ø–µ.

–†–∞–∑–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º.
–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ.
"""

from datetime import datetime

from mau.deck.card import MauCard
from mau.game.game import MauGame
from mau.game.player_manager import PlayerManager

_MEDALS = ("ü•á", "ü•à", "ü•â")


def place_medal(i: int) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–¥–∞–ª—å –∑–∞ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."""
    return _MEDALS[i] if i < len(_MEDALS) else None


def plural_form(n: int, v: tuple[str, str, str]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "–¥–ª—è –æ–¥–Ω–æ–≥–æ", "–¥–ª—è –¥–≤—É—Ö",
    "–¥–ª—è –ø—è—Ç–∏" –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    return v[2 if (4 < n % 100 < 20) else (2, 0, 1, 1, 1, 2)[min(n % 10, 5)]]  # noqa: PLR2004


def time_delta(seconds: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥.

    –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–ª–æ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏.
    """
    h, r = divmod(seconds, 3600)
    m, s = divmod(r, 60)
    res = ""

    if h != 0:
        res += f"{m} {plural_form(m, ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'))} "
    if m != 0:
        res += f"{m} {plural_form(m, ('–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'))} "
    if s != 0:
        res += f"{s} {plural_form(m, ('—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'))}"
    return res


def game_rules_list(game: MauGame) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã.

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª.
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, —Ç–æ –≤–µ—Ä–Ω—ë—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    """
    rule_list = ""
    for name, status in game.rules.iter_rules():
        if status:
            rule_list += f"- {name}\n"
    return f"ü™Ñ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞\n:{rule_list}" if rule_list != "" else ""


def players_list(pm: PlayerManager, reverse: bool, shotgun: bool) -> str:
    """–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã.

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞, —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤.
    –ê–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ–º–µ—á–∞–µ—Ç –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º.
    –¢–∞–∫–∂–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –∏ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –∏–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞.
    """
    reverse_sim = "‚óÄÔ∏è" if reverse else "‚ñ∂Ô∏è"
    res = f"‚ú® –ò–≥—Ä–æ–∫–∏ {reverse_sim}:\n"
    for i, player in enumerate(pm.iter()):
        shotgun_stat = f" {player.shotgun.cur} / 8 üî´" if shotgun else ""
        name = (
            f"<b>{player.mention}</b>"
            if player == pm.current
            else player.mention
        )
        res += f"- {name} üÉè{len(player.hand)} {shotgun_stat}\n"
    return res


def _card_info(card: MauCard) -> str:
    return f"{card.color.emoji} {card.value} {card.behavior.name}"


def game_status(game: MauGame) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.

    –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–∞–º–∞—è —Ä–∞–∑–Ω–∞ –ø–æ–ª–µ–∑–Ω–∞—è
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
    –ö–∞–∫ –º–∏–Ω–∏–º—É–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –∏ —Ç–∞–∫
    –¥–∞–ª–µ–µ.
    """
    if not game.started:
        room_players = ", ".join(pl.mention for pl in game.pm.iter())
        return (
            f"‚òï <b>–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞</b> {game.owner.mention}!\n"
            f"‚ú® –≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ {len(game.pm)}:\n{room_players}\n\n"
            "ü™Ñ –ò–≥—Ä–æ–≤—ã–µ <b>–ø—Ä–∞–≤–∏–ª–∞</b> –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–¥–µ–ª–∞—Ç—å –∏–≥—Ä—É –±–æ–ª–µ–µ –≤–µ—Å—ë–ª–æ–π.\n"
            "üçâ –í—Ä–µ–º—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ!"
        )

    if game.rules.single_shotgun.status:
        shotgun_stats = f"üî´ <b>–†–µ–≤–æ–ª—å–≤–µ—Ä</b>: {game.shotgun.cur} / 8"
    else:
        shotgun_stats = ""

    now = datetime.now()
    game_delta = time_delta(int((now - game.game_start).total_seconds()))
    turn_delta = time_delta(int((now - game.turn_start).total_seconds()))
    return (
        f"‚òï <b>–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞</b> {game.owner.name}:\n"
        f"üÉè <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞</b>: {_card_info(game.deck.top)}\n"
        f"ü¶ù <b>–•–æ–¥</b> {game.player.mention}, –ø—Ä–æ—à–ª–æ {turn_delta}\n"
        f"‚è≥ <b>–ò–≥—Ä–∞ –∏–¥—ë—Ç</b> {game_delta}\n\n"
        f"{players_list(game.pm, game.reverse, game.rules.shotgun.status)}\n"
        f"{game_rules_list(game)}"
        f"üì¶ <b>–∫–∞—Ä—Ç</b> –≤ –∫–æ–ª–æ–¥–µ: {len(game.deck.cards)} –¥–æ—Å—Ç—É–ø–Ω–æ / "
        f"{len(game.deck.used_cards)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ.\n{shotgun_stats}"
    )


def end_game_players(pm: PlayerManager) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã.

    –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö.
    """
    res = "üéâ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å</b>!\n"
    for i, winner in enumerate(pm.iter(pm.winners)):
        res += f"{place_medal(i) or f'{i + 1}'}. {winner.name}\n"
    losers = sorted(
        [(p, p.count_cost()) for p in pm.iter(pm.losers)],
        key=lambda r: r[1],
        reverse=True,
    )

    res += "\nüéÄ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ:\n"
    for i, loser in enumerate(losers):
        res += f"{i + 1}. {loser[0].name} - {loser[1]}‚ú®\n"
    return res
