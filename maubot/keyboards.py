"""–û–±—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞.

–í —Ç–æ–∏ —á–∏—Å–ª–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Inline Query.
"""

from collections.abc import Iterator, Sequence

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQueryResultArticle,
    InlineQueryResultCachedSticker,
    InputTextMessageContent,
)

from mau.enums import CardType, GameState
from mau.game.game import UnoGame
from mau.game.player import Player
from mau.game.rules import GameRules, Rule
from maubot.config import config, stickers
from maubot.messages import get_room_status

# –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø—Ä–æ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å inline —Ä–µ–∂–∏–º –±–æ—Ç–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
NO_GAME_QUERY = InlineQueryResultArticle(
    id="nogame",
    title="–í —á–∞—Ç–µ –µ—â—ë –Ω–µ—Ç –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã",
    input_message_content=InputTextMessageContent(
        message_text=(
            "‚òï –°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã.\n"
            "–ê –ø–æ—Å–ª–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. "
        )
    ),
)


SHOTGUN_KEYBOARD = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–í–∑—è—Ç—å üÉè", callback_data="take"),
            InlineKeyboardButton(text="üî´ –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å", callback_data="shot"),
        ]
    ]
)

SELECT_COLOR = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è", callback_data="color:0"),
            InlineKeyboardButton(text="üíõ", callback_data="color:1"),
            InlineKeyboardButton(text="üíö", callback_data="color:2"),
            InlineKeyboardButton(text="üíô", callback_data="color:3"),
        ],
        [
            InlineKeyboardButton(
                text="üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã", switch_inline_query_current_chat=""
            )
        ],
    ]
)

NEW_GAME_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üç™ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")]
    ]
)


def get_room_markup(game: UnoGame) -> InlineKeyboardMarkup:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–æ–π.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–µ–π.
    –ê —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª.
    """
    buttons = [
        [
            InlineKeyboardButton(text="ü™Ñ –ü—Ä–∞–≤–∏–ª–∞", callback_data="room_rules"),
            InlineKeyboardButton(text="üÉè –ö–æ–ª–æ–¥–∞", callback_data="deck_edit"),
            InlineKeyboardButton(text="‚òï –ó–∞–π—Ç–∏", callback_data="join"),
        ]
    ]
    if len(game.pm) >= config.min_players:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game"
                )
            ]
        )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –°–æ–±–∏—Ä–∞–µ–º Inline query —Å –∫–æ–ª–æ–¥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ============================================

_COLOR_INFO = (
    (0, "–ö—Ä–∞—Å–Ω—ã–π", "‚ù§Ô∏è"),
    (1, "–ñ—ë–ª—Ç—ã–π", "üíõ"),
    (2, "–ó–µ–ª—ë–Ω—ã–π", "üíö"),
    (3, "–°–∏–Ω–∏–π", "üíô"),
)


def get_hand_cards(player: Player) -> Iterator[InlineQueryResultCachedSticker]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä—É–∫–∏."""
    player_cards = player.cover_cards()
    for i, cover_card in enumerate(player_cards.cover):
        yield InlineQueryResultCachedSticker(
            id=f"{cover_card.to_str()}:{i}",
            sticker_file_id=stickers.normal[cover_card.to_str()],
        )

    for i, cover_card in enumerate(player_cards.uncover):
        yield InlineQueryResultCachedSticker(
            id=f"status:{i}",
            sticker_file_id=stickers.not_playable[cover_card.to_str()],
            input_message_content=InputTextMessageContent(
                message_text=get_room_status(player.game)
            ),
        )


def _add_sticker(
    id: str, sticker: str, message: str
) -> InlineQueryResultCachedSticker:
    return InlineQueryResultCachedSticker(
        id=id,
        sticker_file_id=sticker,
        input_message_content=InputTextMessageContent(message_text=message),
    )


def get_hand_query(
    player: Player,
) -> Sequence[InlineQueryResultCachedSticker | InlineQueryResultArticle]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    result = []
    if player.game.state == GameState.TAKE:
        result = [
            _add_sticker("next", stickers.options.next_turn, "üëÄ –ü—Ä–æ–ø—É—Å–∫–∞—é")
        ]
    elif player == player.game.player:
        result = [_add_sticker("take", stickers.options.draw, "üëÄ –ë–µ—Ä—É –∫–∞—Ä—Ç—É")]

    if (
        player.game.deck.top.card_type == CardType.TAKE_FOUR
        and player.game.take_counter
    ):
        result.append(
            _add_sticker(
                "bluff",
                stickers.options.bluff,
                "üç∑ –¢—ã –±–ª–µ—Ñ—É–µ—à—å, –ø–æ–∫–∞–∑—ã–≤–∞–π –∫–∞—Ä—Ç—ã!",
            )
        )

    result.extend(get_hand_cards(player))
    return result


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
# =========================


def get_rules_markup(game_rules: GameRules) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{'üåü' if rule[1] else ''}{rule[0]}",
                    callback_data=f"rule:{i}",
                )
            ]
            for i, rule in enumerate(game_rules.iter_rules())
        ]
    )


def select_player_markup(game: "UnoGame") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞.

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏ —Å–∫–æ–ª—å–∫–æ —É –Ω–µ–≥–æ —Å–µ–π—á–∞—Å –∫–∞—Ä—Ç.
    """
    res = []
    for i, pl in game.pm.iter_others():
        res.append(
            [
                InlineKeyboardButton(
                    # TODO: –ù—É –∫–æ–≥–¥–∞ —Ç–∞–º username
                    text=f"{pl.name} ({len(pl.hand)} üÉè)",
                    callback_data=f"select_player:{i}",
                )
            ]
        )

    if game.rules.twist_hand_pass.status:
        res.append(
            [InlineKeyboardButton(text="üç∑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="next")]
        )

    return InlineKeyboardMarkup(inline_keyboard=res)
