"""–û–±—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞.

–í —Ç–æ–∏ —á–∏—Å–ª–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Inline Query.
"""

from typing import Iterator

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQueryResultArticle,
    InlineQueryResultCachedSticker,
    InputTextMessageContent,
)

from maubot import stickers
from maubot.config import config
from maubot.messages import game_status
from maubot.uno.card import TakeFourCard
from maubot.uno.game import UnoGame

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–º
# –ë—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –∫ –∏–≥—Ä–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
TURN_MARKUP = InlineKeyboardMarkup(inline_keyboard=[[
    InlineKeyboardButton(
        text="–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥",
        switch_inline_query_current_chat=""
    )
]])

def get_room_markup(game: UnoGame) -> InlineKeyboardMarkup:
    buttons = [[
        InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º",
            switch_inline_query_current_chat=""
        ),
        InlineKeyboardButton(text="–ó–∞–π—Ç–∏", callback_data="join")
    ]]
    if len(game.players) >= config.min_players:
        buttons.append([InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
            callback_data="start_game"
        )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
# –ü–æ–º–æ–≥–∞–µ—Ç —É–¥–æ–±–Ω–µ–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª
# –¢—É—Ç –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø—É–Ω–∫—Ç–∞: –∫–ª–∞—Å—Å–∏–∫–∞ –∏ –¥–∏–∫–∏–π —Ä–µ–∂–∏–º
# TODO: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é, –ø–æ—Å–ª–µ —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
SELECT_GAME_QUERY = [
    InlineQueryResultArticle(
        id="mode:classic",
        title="üéª –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º",
        input_message_content=InputTextMessageContent(message_text=(
            "üéª <b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º</b>:\n"
            "–£–∂–µ –ø—Ä–∏–≤—ã—á–Ω–∞—è –≤–∞–º –∏–≥—Ä–∞ —Å –Ω–∞–±–æ—Ä–æ–º –∏–∑ 108 –∫–∞—Ä—Ç."
        ))
    ),
    InlineQueryResultArticle(
        id="mode:wild",
        title="üêâ –î–∏–∫–∏–π —Ä–µ–∂–∏–º",
        input_message_content=InputTextMessageContent(message_text=(
            "üêâ <b>–î–∏–∫–∏–π —Ä–µ–∂–∏–º</b>:\n"
            "–ë–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–≥—Ä—ã.\n"
            "–ü–æ 4 –Ω–∞–±–æ—Ä–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∫–∞—Ä—Ç 0-5 –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç.\n"
            "–ê —Ç–∞–∫–∂–µ –ø–æ 6 —á—ë—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —á—Ç–æ–±—ã –∏–≥—Ä–∞ –±—ã–ª–∞ –≤–µ—Å–µ–ª–µ–µ."
        ))
    )
]

NO_GAME_QUERY = [
    InlineQueryResultArticle(
        id="nogame",
        title="–í —á–∞—Ç–µ –µ—â—ë –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç—ã",
        input_message_content=InputTextMessageContent(message_text=(
            "–°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã.\n"
            "–ê –ø–æ—Å–ª–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. "
        ))
    )
]

# –°–æ–±–∏—Ä–∞–µ–º Inline query —Å –∫–æ–ª–æ–¥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ============================================

_COLOR_INFO = (
    (0, "–ö—Ä–∞—Å–Ω—ã–π", "‚ù§Ô∏è"),
    (1, "–ñ—ë–ª—Ç—ã–π", "üíõ"),
    (2, "–ó–µ–ª—ë–Ω—ã–π", "üíö"),
    (3, "–°–∏–Ω–∏–π", "üíô"),
)

def get_color_query(player) -> list:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–≤–µ—Ç–∞."""
    result = [
        InlineQueryResultArticle(
            id=f"color:{i}",
            title=f"–í—ã–±–∏—Ä–∞—é {name}",
            input_message_content=InputTextMessageContent(message_text=(
                f"–Ø –≤—ã–±–∏—Ä–∞—é {sim}{name}"
            ))
        )
        for i, name, sim in _COLOR_INFO
    ]
    result.append(InlineQueryResultArticle(
        id="status",
        title="–í–∞—à–∏ –∫–∞—Ä—Ç—ã (–∂–º—è–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã):",
        description=", ".join([str(card) for card in player.hand]),
        input_message_content=InputTextMessageContent(
            message_text=game_status(player.game)
        ),
    ))
    return result

def get_hand_cards(player) -> Iterator:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä—É–∫–∏."""
    player_cards = player.get_cover_cards()
    for i, cover_card in enumerate(player_cards.cover):
        yield InlineQueryResultCachedSticker(
            id=f"{stickers.to_str(cover_card)}:{i}",
            sticker_file_id=stickers.NORMAL[stickers.to_sticker_id(cover_card)]
        )

    for i, cover_card in enumerate(player_cards.uncover):
        yield InlineQueryResultCachedSticker(
            id=f"status:{i}",
            sticker_file_id=stickers.NOT_PLAYABLE[
                stickers.to_sticker_id(cover_card)
            ],
            input_message_content=InputTextMessageContent(
                message_text=game_status(player.game)
            )
        )

def get_all_hand_cards(player):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    for i, cover_card in enumerate(player.hand):
        yield InlineQueryResultCachedSticker(
            id=f"status:{i}",
            sticker_file_id=stickers.NOT_PLAYABLE[
                stickers.to_sticker_id(cover_card)
            ],
            input_message_content=InputTextMessageContent(
                message_text=game_status(player.game)
            )
        )


def get_hand_query(player) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    # –ï—Å–ª–∏ –∏–≥—Ä–æ–π —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç, —Ç–æ –∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∫–∞–∫–∏—Ö —É –Ω–µ–≥–æ –Ω–µ—Ç—É
    if not player.is_current:
        return get_all_hand_cards(player)

    if player.game.choose_color_flag:
        return get_color_query(player)

    if player.took_card:
        result = [InlineQueryResultCachedSticker(
            id="pass",
            sticker_file_id=stickers.OPTIONS.next_turn,
            input_message_content=InputTextMessageContent(message_text=(
                "–ü—Ä–æ–ø—É—Å–∫–∞—é."
            )))
        ]
    else:
        if player.game.take_counter:
            take_message = f"üÉè –ë–µ—Ä—É {player.game.take_counter} –∫–∞—Ä—Ç."
        else:
            take_message = "üÉè –ë–µ—Ä—É –∫–∞—Ä—Ç—É."

        result = [InlineQueryResultCachedSticker(
            id="take",
            sticker_file_id=stickers.OPTIONS.draw,
            input_message_content=InputTextMessageContent(message_text=(
                take_message
            )))
        ]

    if (isinstance(player.game.deck.top, TakeFourCard)
        and player.game.take_counter
    ):
        result.append(InlineQueryResultCachedSticker(
            id="bluff",
            sticker_file_id=stickers.OPTIONS.bluff,
            input_message_content=InputTextMessageContent(message_text=(
                "–Ø –æ—Å–ø–æ—Ä—é —Ç–≤–æ–π –±–ª–µ—Ñ!"
            ))
        ))

    # –ö–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏ —É–∂–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å
    for card_query in get_hand_cards(player):
        result.append(card_query)

    # –Ø–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
    result.append(InlineQueryResultCachedSticker(
        id="status",
        sticker_file_id=stickers.OPTIONS.info,
        input_message_content=InputTextMessageContent(
            message_text=game_status(player.game)
    )))

    return result
