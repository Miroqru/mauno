"""–û–±—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞.

–í —Ç–æ–∏ —á–∏—Å–ª–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Inline Query.
"""

from collections.abc import Iterator

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQueryResultArticle,
    InlineQueryResultCachedSticker,
    InputTextMessageContent,
)

from maubot import stickers
from maubot.config import config
from maubot.messages import get_room_status, take_cards_message
from maubot.uno.card import TakeFourCard
from maubot.uno.enums import GameState
from maubot.uno.game import RULES, GameRules, UnoGame
from maubot.uno.player import Player

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–º
# –ë—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –∫ –∏–≥—Ä–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
TURN_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üéÆ –†–∞–∑—ã–≥—Ä–∞—Ç—å üÉè", switch_inline_query_current_chat=""
            )
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã —Å —Ä–µ–≤–æ–ª—å–≤–µ—Ä–æ–º
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∑—è—Ç –∫–∞—Ä—Ç—ã –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å
# –ï—Å–ª–∏ –µ–º—É –ø–æ–≤–µ–∑—ë—Ç, –±—Ä–∞—Ç—å –±—É–¥–µ—Ç —É–∂–µ –Ω–µ –æ–Ω
SHOTGUN_REPLY = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–í–∑—è—Ç—å üÉè", callback_data="take"),
            InlineKeyboardButton(text="üî´ –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å", callback_data="shot"),
        ]
    ]
)

# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
COLOR_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è", callback_data="color:0"),
            InlineKeyboardButton(text="üíõ", callback_data="color:1"),
            InlineKeyboardButton(text="üíö", callback_data="color:2"),
            InlineKeyboardButton(text="üíô", callback_data="color:3"),
        ]
    ]
)

# –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø—Ä–æ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å inline —Ä–µ–∂–∏–º –±–æ—Ç–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
NO_GAME_QUERY = [
    InlineQueryResultArticle(
        id="nogame",
        title="–í —á–∞—Ç–µ –µ—â—ë –Ω–µ—Ç –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã",
        input_message_content=InputTextMessageContent(
            message_text=(
                "‚òï –°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã.\n"
                "–ê –ø–æ—Å–ª–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. "
            )
        ),
    )
]


def get_room_markup(game: UnoGame) -> InlineKeyboardMarkup:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–æ–π.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–µ–π.
    –ê —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª.
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚öôÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="room_settings"
            ),
            InlineKeyboardButton(text="‚òï –ó–∞–π—Ç–∏", callback_data="join"),
        ]
    ]
    if len(game.players) >= config.min_players:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game"
                )
            ]
        )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –°–æ–±–∏—Ä–∞–µ–º Inline query —Å –∫–æ–ª–æ–¥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ============================================

_COLOR_INFO = (
    (0, "–ö—Ä–∞—Å–Ω—ã–π", "‚ù§Ô∏è"),
    (1, "–ñ—ë–ª—Ç—ã–π", "üíõ"),
    (2, "–ó–µ–ª—ë–Ω—ã–π", "üíö"),
    (3, "–°–∏–Ω–∏–π", "üíô"),
)


def get_color_query(player: Player) -> list[InlineQueryResultArticle]:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–≤–µ—Ç–∞."""
    result = [
        InlineQueryResultArticle(
            id=f"color:{i}",
            title=f"–í—ã–±—Ä–∞—Ç—å {name}",
            input_message_content=InputTextMessageContent(
                message_text=(f"üé® –Ø –≤—ã–±–∏—Ä–∞—é.. {sim}")
            ),
        )
        for i, name, sim in _COLOR_INFO
    ]
    result.append(
        InlineQueryResultArticle(
            id="status",
            title="–í–∞—à–∏ –∫–∞—Ä—Ç—ã (–∂–º—è–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã):",
            description=", ".join([str(card) for card in player.hand]),
            input_message_content=InputTextMessageContent(
                message_text=get_room_status(player.game)
            ),
        )
    )
    return result


# TODO: –ê –º–æ–∂–µ—Ç —É–±—Ä–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–≤—Å–µ–º
def select_player_query(
    player: Player, add_pass_button: bool = False
) -> list[InlineQueryResultArticle]:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞."""
    result = []

    for i, pl in enumerate(player.game.players):
        if i == player.game.current_player:
            continue

        result.append(
            InlineQueryResultArticle(
                id=f"select_player:{i}",
                title=f"{pl.name} ({len(pl.hand)} –∫–∞—Ä—Ç)",
                input_message_content=InputTextMessageContent(
                    message_text=(f"üî™ –Ø <b>–≤—ã–±–∏—Ä–∞—é</b> {pl.name}.")
                ),
            )
        )

    # TODO: –≠—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π —Ç–∞–∫ –Ω–∏–∫—Ç–æ –∏ –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è, –±–ª–∏–Ω
    if add_pass_button:
        result.append(
            InlineQueryResultArticle(
                id="pass",
                title="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥",
                input_message_content=InputTextMessageContent(
                    message_text=("üç∑ –í —ç—Ç–æ—Ç —Ä–∞–∑ —è –æ—Å—Ç–∞–≤–ª—é –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å.")
                ),
            )
        )

    return result


def select_player_markup(player: Player) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞.

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏ —Å–∫–æ–ª—å–∫–æ —É –Ω–µ–≥–æ —Å–µ–π—á–∞—Å –∫–∞—Ä—Ç.
    """
    inline_keyboard = []

    for i, pl in enumerate(player.game.players):
        if i == player.game.current_player:
            continue
        inline_keyboard.append(
            [
                InlineKeyboardButton(
                    text=f"{pl.user.first_name} ({len(pl.hand)} –∫–∞—Ä—Ç)",
                    callback_data=f"select_player:{i}",
                )
            ]
        )

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


def get_hand_cards(player: Player) -> Iterator[InlineQueryResultCachedSticker]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä—É–∫–∏."""
    player_cards = player.get_cover_cards()
    for i, cover_card in enumerate(player_cards.cover):
        yield InlineQueryResultCachedSticker(
            id=f"{stickers.to_sticker_id(cover_card)}:{i}",
            sticker_file_id=stickers.NORMAL[stickers.to_sticker_id(cover_card)],
        )

    for i, cover_card in enumerate(player_cards.uncover):
        yield InlineQueryResultCachedSticker(
            id=f"status:{i}",
            sticker_file_id=stickers.NOT_PLAYABLE[
                stickers.to_sticker_id(cover_card)
            ],
            input_message_content=InputTextMessageContent(
                message_text=get_room_status(player.game)
            ),
        )


def get_all_hand_cards(
    player: Player,
) -> Iterator[InlineQueryResultCachedSticker]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏."""
    for i, cover_card in enumerate(player.hand):
        yield InlineQueryResultCachedSticker(
            id=f"status:{i}",
            sticker_file_id=stickers.NOT_PLAYABLE[
                stickers.to_sticker_id(cover_card)
            ],
            input_message_content=InputTextMessageContent(
                message_text=get_room_status(player.game)
            ),
        )


def _add_sticker(
    id: str, sticker: str, message: str
) -> InlineQueryResultCachedSticker:
    return InlineQueryResultCachedSticker(
        id=id,
        sticker_file_id=sticker,
        input_message_content=InputTextMessageContent(message_text=message),
    )


def get_hand_query(player: Player) -> list[InlineQueryResultCachedSticker]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç, —Ç–æ –∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∫–∞–∫–∏—Ö —É –Ω–µ–≥–æ –Ω–µ—Ç—É
    result = []
    if not player.is_current and not player.game.rules.intervention:
        return get_all_hand_cards(player)

    elif player.game.state == GameState.CHOOSE_COLOR:
        return get_color_query(player)

    elif player.game.state == GameState.TWIST_HAND:
        return select_player_query(player)

    elif player.game.take_flag:
        result = [
            _add_sticker("pass", stickers.OPTIONS.next_turn, "üÉè –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        ]
    elif player.is_current:
        result = [
            _add_sticker(
                "take", stickers.OPTIONS.draw, take_cards_message(player.game)
            )
        ]

    if (
        isinstance(player.game.deck.top, TakeFourCard)
        and player.game.take_counter
    ):
        result.append(
            _add_sticker(
                "bluff",
                stickers.OPTIONS.bluff,
                "üç∑ –¢—ã –±–ª–µ—Ñ—É–µ—à—å, –ø–æ–∫–∞–∑—ã–≤–∞–π –∫–∞—Ä—Ç—ã!",
            )
        )

    # –ö–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å
    result.extend(get_hand_cards(player))

    # –Ø–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
    result.append(
        _add_sticker(
            "status",
            stickers.OPTIONS.info,
            get_room_status(player.game),
        )
    )

    return result


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
# =========================


def create_button(rule: str, status: bool) -> InlineKeyboardButton:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞."""
    status_sim = "üåü" if status else ""
    return InlineKeyboardButton(
        text=f"{status_sim}{rule.name}",
        callback_data=f"set:{rule.key}:{not status}",
    )


# TODO: –ö–æ–≥–¥–∞ –Ω–∞–∫–æ–Ω–µ—Ü –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å—Ç–∞–Ω—É—Ç –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–∫–æ–º
def generate_buttons(game_rules: GameRules) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã."""
    buttons = [
        [create_button(rule, getattr(game_rules, rule.key, False))]
        for rule in RULES
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
