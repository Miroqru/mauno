"""–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è.

–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.
–ò–Ω–∞—á–µ –≥–æ–≤–æ—Ä—è –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Ö–æ–¥—ã –∏–≥—Ä–æ–∫–æ–≤ –∏
–¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç –∏–∑ –∫–æ–ª–æ–¥—ã.
"""

from dataclasses import dataclass
from datetime import datetime
from random import randint, shuffle
from typing import NamedTuple

from loguru import logger

from mau.card import BaseCard, CardColor
from mau.deck import Deck
from mau.enums import GameEvents, GameState
from mau.events import BaseEventHandler, Event
from mau.exceptions import (
    AlreadyJoinedError,
    LobbyClosedError,
    NoGameInChatError,
)
from mau.player import BaseUser, Player


@dataclass(slots=True)
class Rule:
    """–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –∏–≥—Ä—ã."""

    name: str
    status: bool
    key: str


# TODO: –î–∞–≤–∞–π—Ç–µ –∑–∞–º–µ–Ω–∏–º –≤–æ—Ç —ç—Ç–æ—Ç –±—Ä–µ–¥ –Ω–∞ —á—Ç–æ-—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ
class GameRules(NamedTuple):
    """–ù–∞–±–æ—Ä –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã."""

    twist_hand: Rule = Rule("ü§ù –û–±–º–µ–Ω —Ä—É–∫–∞–º–∏", False, "twist_hand")
    rotate_cards: Rule = Rule("üß≠ –û–±–º–µ–Ω —Ç–µ–ª–∞–º–∏.", False, "rotate_cards")
    take_until_cover: Rule = Rule(
        "üç∑ –ë–µ—Ä—É –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.", False, "take_until_cover"
    )
    single_shotgun: Rule = Rule("üé≤ –û–±—â–∏–π —Ä–µ–≤–æ–ª—å–≤–µ—Ä.", False, "single_shotgun")
    shotgun: Rule = Rule("üî´ –†—É–ª–µ—Ç–∫–∞.", False, "shotgun")
    wild: Rule = Rule("üêâ –î–∏–∫–∏–µ –∫–∞—Ä—Ç—ã", False, "wild")
    auto_choose_color: Rule = Rule("üÉè —Å–∞–º–æ—Ü–≤–µ—Ç", False, "auto_choose_color")
    choose_random_color: Rule = Rule(
        "üé® –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç", False, "choose_random_color"
    )
    random_color: Rule = Rule("üé® –ö–∞–∫–æ–π —Ü–≤–µ—Ç –¥–∞–ª—å—à–µ?", False, "random_color")
    debug_cards: Rule = Rule("ü¶ù –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã!", False, "debug_cards")
    side_effect: Rule = Rule("üåÄ –ü–æ–±–æ—á–Ω—ã–π –≤—ã–±—Ä–æ—Å", False, "side_effect")
    ahead_of_curve: Rule = Rule("üî™ –ù–∞ –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ üîß", False, "ahead_of_curve")
    intervention: Rule = Rule("üòà –í–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ üîß", False, "intervention")
    twist_hand_pass: Rule = Rule("üëã –ë–µ–∑ –æ–±–º–µ–Ω–∞", False, "twist_hand_pass")
    one_winner: Rule = Rule("üëë –û–¥–∏–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å", False, "one_winner")
    auto_skip: Rule = Rule("üí∏ –ê–≤—Ç–æ –ø—Ä–æ–ø—É—Å–∫", False, "auto_skip")


class UnoGame:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—É—é –∏–≥—Ä—É Uno.

    –ö–∞–∂–¥–∞—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—É.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç –∏ –æ—á–µ—Ä—ë–¥–Ω–æ—Å—Ç–∏ —Ö–æ–¥–æ–≤.
    """

    def __init__(
        self, journal: BaseEventHandler, room_id: str, owner: BaseUser
    ) -> None:
        self.room_id = room_id
        self.rules = GameRules()
        self.deck = Deck()
        self.event_handler: BaseEventHandler = journal

        # –ò–≥—Ä–æ–∫–∏ Uno
        self.current_player: int = 0
        self.owner = Player(self, owner.id, owner.name)
        self.bluff_player: Player | None = None
        self.players: list[Player] = [self.owner]
        self.winners: list[Player] = []
        self.losers: list[Player] = []

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        self.started: bool = False
        self.open: bool = True
        self.reverse: bool = False
        self.take_counter: int = 0
        self.take_flag: bool = False
        self.state: GameState = GameState.NEXT

        self.shotgun_lose: int = 0
        self.shotgun_current: int = 0

        # –¢–∞–π–º–µ—Ä—ã
        self.game_start = datetime.now()
        self.turn_start = datetime.now()

    @property
    def player(self) -> Player:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
        if len(self.players) == 0:
            raise ValueError("Game not started to get players")
        return self.players[self.current_player % len(self.players)]

    @property
    def prev(self) -> Player:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
        if self.reverse:
            prev_index = (self.current_player + 1) % len(self.players)
        else:
            prev_index = (self.current_player - 1) % len(self.players)
        return self.players[prev_index]

    def get_player(self, user_id: str) -> Player | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ —Å—Ä–µ–¥–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –µ–≥–æ ID."""
        for player in self.players:
            if player.user_id == user_id:
                return player

        return None

    def can_play(self, user_id: str) -> bool:
        """–ú–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è."""
        player = self.get_player(user_id)
        if player is None:
            return False

        # TODO: –£–±–∏—Ä–∞–µ–º ahead_of_curve
        return (
            self.player == player
            or self.rules.ahead_of_curve.status
            or self.rules.intervention.status
        )

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º –∏–≥—Ä—ã
    # =======================

    def push_event(
        self, from_player: Player, event_type: GameEvents, data: str = ""
    ) -> None:
        """–û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ –º–µ—Ç–æ–¥–æ–º journal.push.

        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É.
        """
        self.event_handler.push(
            Event(self.room_id, from_player, event_type, data, self)
        )

    def start(self) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ —á–∞—Ç–µ."""
        logger.info("Start new game in chat {}", self.room_id)
        self.winners.clear()
        self.losers.clear()
        shuffle(self.players)

        if self.rules.wild.status:
            self.deck.fill_wild()
        else:
            self.deck.fill_classic()

        if self.rules.single_shotgun.status:
            self.shotgun_lose = randint(1, 8)

        for player in self.players:
            player.take_first_hand()

        self.take_first_card()
        self.started = True
        self.push_event(self.owner, GameEvents.GAME_START)

    def end(self) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É."""
        self.players.clear()
        self.started = False
        self.push_event(self.owner, GameEvents.GAME_END)

    def take_first_card(self) -> None:
        """–ë–µ—Ä—ë—Ç –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—ã."""
        # –≠—Ç–æ –∫–æ–Ω–µ—á–Ω–æ –∫–æ—Å—Ç—ã–ª—å, —Ç–µ–º –µ–Ω –º–µ–Ω–µ–µ —Å–µ–π—á–∞—Å —ç—Ç–æ –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ
        while self.deck._top is None or self.deck._top.color == CardColor.BLACK:
            card = self.deck.take_one()
            if card.color == CardColor.BLACK:
                self.deck.put(card)
            else:
                self.deck.put_on_top(card)

        self.deck.top(self)

    def choose_color(self, color: CardColor) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã."""
        self.deck.top.color = color
        self.push_event(self.player, GameEvents.GAME_SELECT_COLOR, str(color))
        self.next_turn()

    def next_turn(self) -> None:
        """–ü–µ—Ä–µ–¥–∞—ë—Ç —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É."""
        logger.info("Next Player!")
        self.state = GameState.NEXT
        self.take_flag = False
        self.turn_start = datetime.now()
        self.skip_players()
        self.push_event(self.player, GameEvents.GAME_TURN)

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤
    # ==========================

    def add_player(self, user: BaseUser) -> Player:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É."""
        logger.info("Joining {} in game with id {}", user, self.room_id)
        if not self.open:
            raise LobbyClosedError()

        player = self.get_player(user.id)
        if player is not None:
            raise AlreadyJoinedError()

        player = Player(self, user.id, user.name)
        player.on_leave()
        if self.started:
            player.take_first_hand()

        self.players.append(player)
        self.push_event(player, GameEvents.GAME_JOIN)
        return player

    def remove_player(self, player: Player) -> None:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–≥—Ä—ã."""
        logger.info("Leaving {} game with id {}", player, self.room_id)
        if player is None:
            # TODO: –¢—Ç—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise NoGameInChatError

        if len(player.hand) == 0:
            self.winners.append(player)
            self.push_event(player, GameEvents.GAME_LEAVE, "win")

            if self.rules.one_winner.status:
                self.end()
        else:
            self.losers.append(player)
            self.push_event(player, GameEvents.GAME_LEAVE, "lose")

        player.on_leave()
        self.players.remove(player)

        if len(self.players) <= 1:
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–∞–º –≤—ã—à–µ–ª/–ø—Ä–æ–∏–≥—Ä–∞–ª. –¥—Ä—É–≥–∏–µ –ø–æ–±–µ–∂–¥–∞—é—Ç
            if self.started and player == self.player:
                self.winners.extend(self.players)
            else:
                self.losers.extend(self.players)
            self.end()
        elif player == self.player:
            # –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫ –∑–∞—Å—Ç—Ä–µ–ª–∏–ª—Å—è, –±–æ–ª—å—à–µ –∫–∞—Ä—Ç—ã –Ω–µ –±–µ—Ä—ë–º
            self.take_counter = 0
            self.next_turn()

    def skip_players(self, n: int = 1) -> None:
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.

        –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤.

        Args:
            n (int): –°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (1).

        """
        self.push_event(self.player, GameEvents.GAME_NEXT, str(n))
        if self.reverse:
            self.current_player = (self.current_player - n) % len(self.players)
        else:
            self.current_player = (self.current_player + n) % len(self.players)

    def rotate_cards(self) -> None:
        """–ú–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–∞—Ö –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤."""
        last_hand = self.players[-1].hand.copy()
        for i in range(len(self.players) - 1, 0, -1):
            self.players[i].hand = self.players[i - 1].hand.copy()

        self.players[0].hand = last_hand
        self.push_event(self.player, GameEvents.GAME_ROTATE)

    def set_current_player(self, player: Player) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ."""
        for i, pl in enumerate(self.players):
            if player == pl:
                self.current_player = i
                self.push_event(player, GameEvents.PLAYER_INTERVENED)
                return

    def process_turn(self, card: BaseCard, player: Player) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ–¥."""
        logger.info("Playing card {}", card)
        self.deck.put_on_top(card)
        player.hand.remove(card)
        self.push_event(player, GameEvents.PLAYER_PUSH, card.to_str())

        card(self)

        if len(player.hand) == 1:
            self.push_event(player, GameEvents.GAME_UNO, card.to_str())

        if len(player.hand) == 0:
            self.remove_player(player)

        if self.state == GameState.NEXT and self.started:
            if self.rules.random_color.status:
                color = CardColor(randint(0, 3))
                self.deck.top.color = color
                self.push_event(
                    player, GameEvents.GAME_SELECT_COLOR, str(color)
                )
            if self.deck.top.cost == 1 and self.rules.side_effect.status:
                logger.info("Player continue turn")
            else:
                self.next_turn()
