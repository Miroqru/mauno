"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞.

FIXME: –î–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Telegram –±–æ—Ç–∞, –ø–æ—Ç–æ–º –±—ã–ª
–≤—ã–¥–µ–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ.
"""

from random import randint

from loguru import logger

from mau.card import BaseCard, CardColor, CardType
from mau.enums import GameState
from mau.game import UnoGame
from mau.player import Player
from maubot import keyboards, messages

TWIST_HAND_NUM = 2


def process_turn(game: UnoGame, card: BaseCard, player: Player) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ–¥."""
    logger.info("Playing card {}", card)
    game.deck.put_on_top(card)
    player.hand.remove(card)
    game.journal.set_actions(None)

    card(game)

    # 8< -------------------------

    if len(player.hand) == 1:
        game.journal.add("üåü UNO!\n")

    if len(player.hand) == 0:
        game.journal.add(f"üëë {game.name} –ø–æ–±–µ–¥–∏–ª(–∞)!\n")
        game.remove_player(game.user.id)
        if not game.started:
            game.journal.add(messages.end_game_message(game))

    elif all(card.cost == TWIST_HAND_NUM, game.rules.twist_hand):
        game.journal.add(f"‚ú® {game.name} –ó–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è c –∫–µ–º –æ–±–º–µ–Ω—è—Ç—å—Å—è.")
        game.state = GameState.TWIST_HAND
        # TODO: update acton keyboard
        game.journal.set_actions(keyboards.select_player_markup(game))

    elif all(game.rules.rotate_cards, game.deck.top.cost == 0):
        game.rotate_cards()
        game.journal.add(
            "ü§ù –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ–±–º–µ–Ω—è–ª–∏—Å—å –∫–∞—Ä—Ç–∞–º–∏ –ø–æ –∫—Ä—É–≥—É.\n"
            f"{messages.get_room_players(game)}"
        )

    if card.card_type in (CardType.TAKE_FOUR, CardType.CHOOSE_COLOR):
        game.journal.add(f"‚ú® {game.name} –ó–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è –æ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞.")
        game.state = GameState.CHOOSE_COLOR
        # TODO: update acton keyboard
        game.journal.set_actions(keyboards.COLOR_MARKUP)

    if any(
        game.rules.random_color,
        game.rules.choose_random_color,
        game.rules.auto_choose_color,
    ):
        game.journal.add(f"üé® –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç.. {game.deck.top.color}")

    if game.state == GameState.NEXT:
        if game.rules.random_color:
            game.deck.top.color = CardColor(randint(0, 3))
        if game.deck.top.cost == 1 and game.rules.side_effect:
            logger.info("Player continue turn")
        else:
            game.next_turn()
