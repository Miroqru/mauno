"""–ò–≥—Ä–æ–≤–æ–π –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π.

–ò–≥—Ä–æ–≤–æ–π –∂—É—Ä–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ
–≤ —á–∞—Ç.

TODO: –ß—Ç–æ –∑–∞ —Å—É–µ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç—É—Ç –≤ –∂—É—Ä–Ω–∞–ª–µ?
"""

from abc import ABC, abstractmethod
from datetime import datetime
from enum import IntEnum
from typing import NamedTuple, overload

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
# ======================


class EventPriority(IntEnum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–±—ã—Ç–∏—è.

    –£ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç
    –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –≤–∞–∂–Ω–æ.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ.

    - DEBUG: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    - INFO: –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ö–æ–¥—É –∏–≥—Ä—ã
    - SUCCESS: –ë–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–∞–∫ –Ω–∞–ø—Ä–∏–º–µ—Ä –≤–∑—è—Ç–∏–µ –∫–∞—Ä—Ç.
    - WARNING: –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–∞–∫ –Ω–∞–ø—Ä–∏–º–µ—Ä –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã.
    - ERROR: –û—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞—ë—Ç—Å—è —Ä–µ—à–∏—Ç—å —Å–∞–º–æ–º—É.
    """

    DEBUG = 0
    INFO = 1
    SUCCESS = 2
    WARNING = 3
    ERROR = 4


class EventAction(NamedTuple):
    """Callback –∫–Ω–æ–ø–æ—á–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∂—É—Ä–Ω–∞–ª–∞.

    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç
    —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    """

    text: str
    callback_data: str


class Event(NamedTuple):
    """–ó–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏.

    –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Ü–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –æ —Ö–æ–¥–µ –∏–≥—Ä—ã.
    –ü—Ä–∏–º–µ—Ä–æ–º —Å–æ–±—ã—Ç–∏—è –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –≤–∑—è—Ç–∏–µ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–æ–º, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ
    –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.

    –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.
    –ö–æ–≥–¥–∞ –æ–Ω–æ –±—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ, –∫—Ç–æ –±—ã–ª –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–æ –≤–∞–∂–Ω–æ–µ.
    """

    date: datetime
    text: str
    priority: EventPriority

    def __str__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏."""
        return self.text


# –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –∂—É—Ä–Ω–∞–ª–∞
# =========================


class BaseJournal(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –ø–æ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏.
    """

    @abstractmethod
    def add(
        self, text: str, priority: EventPriority | int = EventPriority.INFO
    ) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∂—É—Ä–Ω–∞–ª."""
        pass

    @abstractmethod
    def set_actions(self, actions: list[EventAction] | None = None) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∂—É—Ä–Ω–∞–ª–∞."""
        pass

    @abstractmethod
    def get_journal_message(self) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –∏–∑ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π."""
        pass

    @abstractmethod
    async def send_journal(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞.

        –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —á–∞—Ç telegram, —Ç–∞–∫ –∏ –∫ –ø—Ä–∏–º–µ—Ä—É –∫–æ–Ω—Å–æ–ª—å.
        """
        pass

    @abstractmethod
    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π."""
        pass


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
# ==============


class TelegramJournal(BaseJournal):
    """–ö–ª–∞—Å—Å –∂—É—Ä–Ω–∞–ª–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã –∏ –æ–ø—Ä–∞–≤–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö
    —Å–æ–±—ã—Ç–∏–π –≤ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∏–≥—Ä–æ–π —á–∞—Ç.
    –ö–∞–∂–¥—ã–π –∂—É—Ä–Ω–∞–ª –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤
    –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    """

    def __init__(self, room_id: str, bot: Bot) -> None:
        self.room_id: str = room_id
        self.bot: Bot = bot
        self.default_action = [
            InlineKeyboardButton(
                text="üéÆ –†–∞–∑—ã–≥—Ä–∞—Ç—å üÉè", switch_inline_query_current_chat=""
            )
        ]

        self.events: list[Event] = []
        self.actions: list[EventAction | InlineKeyboardButton] | None = list(
            self.default_action
        )
        self.message: Message | None = None

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–æ–º
    # ===================

    def _actions_to_reply_markup(self) -> InlineKeyboardMarkup | None:
        if self.actions is None:
            return None

        inline_keyboard: list[list[InlineKeyboardButton]] = []
        for i, action in enumerate(self.actions):
            if i % 3 == 0:
                inline_keyboard.append([])

            if isinstance(action, EventAction):
                inline_keyboard[-1].append(
                    InlineKeyboardButton(
                        text=action.text, callback_data=action.callback_data
                    )
                )
            else:
                inline_keyboard[-1].append(action)
        return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    def add(
        self, text: str, priority: EventPriority | int = EventPriority.INFO
    ) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∂—É—Ä–Ω–∞–ª."""
        self.events.append(
            Event(
                date=datetime.now(), text=text, priority=EventPriority(priority)
            )
        )

    # def get_event(self, index: int) -> Event | None:
    #     pass

    # def edit_event(self, index: int, event: Event) -> None:
    #     pass

    # def remove_event(self, index: int) -> None:
    #     pass

    @overload
    def set_actions(self, actions: list[EventAction] | None = None) -> None: ...

    @overload
    def set_actions(
        self, actions: list[EventAction | InlineKeyboardButton] | None = None
    ) -> None: ...

    def set_actions(
        self,
        actions: list | None = None,
    ) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∂—É—Ä–Ω–∞–ª–∞."""
        self.actions = actions

    def get_journal_message(self) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –∏–∑ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π."""
        res = ""
        for event in self.events:
            res += f"{event}\n"
        return res

    # TODO: –£–¥–∞–ª–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ —á—Ç–æ–±—ã –±—ã–ª–æ –º–µ–Ω—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    # async def delete_journal(self):
    #     if self.message is None:
    #         return

    #     max_priority = max(self.events, key=lambda event: event.priority)
    #     if max_priority > 1:
    #         return

    #     await self.message.delete()

    async def send_journal(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∂—É—Ä–Ω–∞–ª –≤ —á–∞—Ç.

        –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –∂—É—Ä–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂—É—Ä–Ω–∞–ª–æ–º.
        –ï—Å–ª–∏ –∂–µ –∂—É—Ä–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∂—É—Ä–Ω–∞–ª –æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Ö–æ–¥–µ –∏–≥—Ä–æ–∫–∞.
        """
        journal_message = self.get_journal_message()
        if self.message is None:
            self.message = await self.bot.send_message(
                chat_id=self.room_id,
                text=journal_message,
                reply_markup=self._actions_to_reply_markup(),
            )
        else:
            await self.message.edit_text(
                text=journal_message,
                reply_markup=self._actions_to_reply_markup(),
            )

    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π."""
        # await self.delete_journal()
        self.events.clear()
        self.actions = list(self.default_action)
        self.message = None

    # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
    # =================

    def __len__(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ."""
        return len(self.events)

    def __getitem__(self, i: int) -> Event:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        return self.events[i]

    def __setitem__(self, i: int, event: Event) -> None:
        """–ò–∑–º–µ–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        if not isinstance(event, Event):
            return ValueError(
                "TelegramJournal can only contains Event instances"
            )
        self.events[i] = event
