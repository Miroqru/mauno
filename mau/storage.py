"""Хранилище сессий и игроков.

Менеджер сессий использует хранилище сессий чтобы сохранять состояние
игр и игроков.
Модуль предоставляет базовое хранилище в оперативной памяти.
"""

from abc import ABC, abstractmethod
from typing import Generic, TypeVar

_V = TypeVar("_V")


class BaseStorage(ABC, Generic[_V]):
    """Базовое хранилище сессий/игроков.

    Определяет интерфейс для работы с хранилищем.
    Позволяет сохранять, удалять и получать состояние.
    Используется два раздельных хранилища для игр и игроков.
    """

    @abstractmethod
    def add(self, key: str, value: _V) -> None:
        """Добавляет новый элемент в хранилище по ключу."""
        pass

    @abstractmethod
    def remove(self, key: str) -> _V:
        """Удаляет элемент из хранилища по ключу.

        Возвращает удалённый элемент.
        Если такого элемента не существует - вернёт исключение.
        """
        pass

    @abstractmethod
    def get(self, key: str) -> _V | None:
        """Возвращает элемент по ключу.

        Если такого элемента нет в хранилище - вернёт None.
        """
        pass


class MemoryStorage(BaseStorage, Generic[_V]):
    """Хранилище в оперативной памяти.

    Базовое хранилище.
    Содержит методы для создания/получения/удаления состояний.
    После завершения работы программы состояния будут сброшены.
    """

    __slots__ = ("_storage",)

    def __init__(self) -> None:
        self._storage: dict[str, _V] = {}

    def add(self, key: str, value: _V) -> None:
        """Добавляет новый элемент в хранилище по ключу."""
        self._storage[key] = value

    def remove(self, key: str) -> _V:
        """Удаляет элемент из хранилища по ключу.

        Возвращает удалённый элемент.
        Если такого элемента не существует - вернёт исключение.
        """
        return self._storage.pop(key)

    def get(self, key: str) -> _V | None:
        """Возвращает элемент по ключу.

        Если такого элемента нет в хранилище - вернёт None.
        """
        return self._storage.get(key)
