"""–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–ª–æ–¥—ã.

–ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–ª–∞—Å—Å, –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–ª–æ–¥—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
–∏–ª–∏ –ø–æ –≥–æ—Ç–æ–≤—ã–º —à–∞–±–ª–æ–Ω–∞–º.
"""

from collections.abc import Iterable, Iterator
from dataclasses import dataclass
from typing import Self

from mau.deck.card import UnoCard
from mau.deck.deck import Deck
from mau.deck.generator import get_card
from mau.enums import CardColor, CardType


@dataclass(slots=True, frozen=True)
class CardGroup:
    """–ì—Ä—É–ø–ø–∞ –∫–∞—Ä—Ç.

    –û–±–æ–±—â—ë–Ω–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã. –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å.
    –¢–∏–ø –∫–∞—Ä—Ç—ã, –∑–Ω–∞—á–µ–Ω–∏–µ, —Ü–≤–µ—Ç–∞, –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ–ª–æ–¥–µ.

    –ö –ø—Ä–∏–º–µ—Ä—É: –ß–∏—Å–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –ø–æ –¥–≤–µ –Ω–∞ –∫–∞–∂–¥—ã–π —Ü–≤–µ—Ç.
    """

    card_type: CardType
    value: int
    colors: Iterable[CardColor]
    count: int

    def cards(self) -> Iterator[UnoCard]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä—É–ø–ø—É –∫–∞—Ä—Ç –≤ –∏—Ç–µ—Ä–∞—Ç–æ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–∞—Ä—Ç.

        –ï—Å–ª–∏ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –ø–æ 3 –∫–∞—Ä—Ç—ã –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤, —Ç–æ –æ–Ω –≤–µ—Ä–Ω—ë—Ç 12 –∫–∞—Ä—Ç.
        """
        for count in range(self.count):
            for color in self.colors:
                yield get_card(self.card_type, color, self.value)


@dataclass(slots=True, frozen=True)
class DeckPreset:
    """–®–∞–±–ª–æ–Ω –∫–æ–ª–æ–¥—ã.

    –°–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ
    –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ.
    """

    name: str
    desc: str
    groups: Iterable[CardGroup]


# –ü—Ä–µ—Å–µ—Ç—ã –∫–æ–ª–æ–¥
# =============

ALL_COLORS = (CardColor.RED, CardColor.YELLOW, CardColor.GREEN, CardColor.BLUE)

# –í—Å–µ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –∫–æ–ª–æ–¥
CARD_PRESETS: dict[str, DeckPreset] = {
    "classic": DeckPreset(
        name="üéª –ö–ª–∞—Å—Å–∏–∫–∞",
        desc="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–ª–æ–¥–∞ –£–Ω–æ",
        groups=(
            CardGroup(CardType.NUMBER, 0, ALL_COLORS, 1),
            CardGroup(CardType.NUMBER, 1, ALL_COLORS, 2),
            CardGroup(CardType.NUMBER, 2, ALL_COLORS, 2),
            CardGroup(CardType.NUMBER, 3, ALL_COLORS, 2),
            CardGroup(CardType.NUMBER, 4, ALL_COLORS, 2),
            CardGroup(CardType.NUMBER, 5, ALL_COLORS, 2),
            CardGroup(CardType.NUMBER, 6, ALL_COLORS, 2),
            CardGroup(CardType.NUMBER, 7, ALL_COLORS, 2),
            CardGroup(CardType.NUMBER, 8, ALL_COLORS, 2),
            CardGroup(CardType.NUMBER, 9, ALL_COLORS, 2),
            CardGroup(CardType.REVERSE, 1, ALL_COLORS, 2),
            CardGroup(CardType.TURN, 1, ALL_COLORS, 2),
            CardGroup(CardType.TAKE, 2, ALL_COLORS, 2),
            CardGroup(CardType.TAKE_FOUR, 4, [CardColor.BLACK], 4),
            CardGroup(CardType.CHOOSE_COLOR, 0, [CardColor.BLACK], 4),
        ),
    ),
    "wild": DeckPreset(
        name="üêç –î–∏–∫–∏–µ –∫–∞—Ä—Ç—ã",
        desc="–ú–µ–Ω—å—à–µ —Ü–∏—Ñ—Ä, –±–æ–ª—å—à–µ –¥–µ–π—Å—Ç–≤–∏–π.",
        groups=(
            CardGroup(CardType.NUMBER, 0, ALL_COLORS, 4),
            CardGroup(CardType.NUMBER, 1, ALL_COLORS, 4),
            CardGroup(CardType.NUMBER, 2, ALL_COLORS, 4),
            CardGroup(CardType.NUMBER, 3, ALL_COLORS, 4),
            CardGroup(CardType.NUMBER, 4, ALL_COLORS, 4),
            CardGroup(CardType.NUMBER, 5, ALL_COLORS, 4),
            CardGroup(CardType.REVERSE, 1, ALL_COLORS, 4),
            CardGroup(CardType.TURN, 1, ALL_COLORS, 4),
            CardGroup(CardType.TAKE, 2, ALL_COLORS, 4),
            CardGroup(CardType.TAKE_FOUR, 4, [CardColor.BLACK], 6),
            CardGroup(CardType.CHOOSE_COLOR, 0, [CardColor.BLACK], 6),
        ),
    ),
    "single": DeckPreset(
        name="üóëÔ∏è –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ",
        desc="–ü–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞.",
        groups=(
            CardGroup(CardType.NUMBER, 0, ALL_COLORS, 1),
            CardGroup(CardType.NUMBER, 1, ALL_COLORS, 1),
            CardGroup(CardType.NUMBER, 2, ALL_COLORS, 1),
            CardGroup(CardType.NUMBER, 3, ALL_COLORS, 1),
            CardGroup(CardType.NUMBER, 4, ALL_COLORS, 1),
            CardGroup(CardType.NUMBER, 5, ALL_COLORS, 1),
            CardGroup(CardType.NUMBER, 6, ALL_COLORS, 1),
            CardGroup(CardType.NUMBER, 7, ALL_COLORS, 1),
            CardGroup(CardType.NUMBER, 8, ALL_COLORS, 1),
            CardGroup(CardType.NUMBER, 9, ALL_COLORS, 1),
            CardGroup(CardType.REVERSE, 1, ALL_COLORS, 1),
            CardGroup(CardType.TURN, 1, ALL_COLORS, 1),
            CardGroup(CardType.TAKE, 2, ALL_COLORS, 1),
            CardGroup(CardType.TAKE_FOUR, 4, [CardColor.BLACK], 1),
            CardGroup(CardType.CHOOSE_COLOR, 0, [CardColor.BLACK], 1),
        ),
    ),
}


class DeckGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–ª–æ–¥—ã.

    –°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –≥—Ä—É–ø–ø—ã –∫–∞—Ä—Ç.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–±–æ—Ä–∫–∏ –∫–æ–ª–æ–¥—ã.
    """

    def __init__(
        self,
        groups: list[CardGroup] | None = None,
        preset_name: str = "custom",
    ) -> None:
        self.groups: list[CardGroup] = groups or []
        self.preset_name = preset_name

    def _cards(self) -> Iterator[UnoCard]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –¥–ª—è –≤—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø."""
        for group in self.groups:
            yield from group.cards()

    @property
    def deck(self) -> Deck:
        """–°–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –∏–∑ –ø—Ä–∞–≤–∏–ª."""
        return Deck(list(self._cards()))

    @classmethod
    def from_preset(cls, preset_name: str) -> Self:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–ª–æ–¥—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —à–∞–±–ª–æ–Ω–∞."""
        return cls(list(CARD_PRESETS[preset_name].groups), preset_name)
