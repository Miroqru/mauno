"""–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π."""

from random import randint
from typing import TYPE_CHECKING, NamedTuple, Self

from loguru import logger

from mau.card import (
    BaseCard,
    CardColor,
    NumberCard,
    ReverseCard,
    TakeCard,
    TakeFourCard,
    TurnCard,
)
from mau.enums import GameState
from mau.exceptions import DeckEmptyError

if TYPE_CHECKING:
    from mau.game import UnoGame


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
# ==========================


class SortedCards(NamedTuple):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ä—Ç—ã –Ω–∞: –ø–æ–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –Ω–µ –ø–æ–∫—Ä—ã–≤–∞—é—â–∏–µ."""

    cover: list[BaseCard]
    uncover: list[BaseCard]


class Player:
    """–ò–≥—Ä–æ–∫ –¥–ª—è —Å–µ—Å—Å–∏–∏ Uno.

    –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.
    –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–µ–π.
    """

    def __init__(self, game: "UnoGame", user_id: str, user_name: str) -> None:
        self.hand: BaseCard = []
        self.game: UnoGame = game
        self.user_id = user_id
        self._user_name = user_name

        self.bluffing = False
        self.anti_cheat = 0

        self.shotgun_current = 0
        self.shotgun_lose = 0

    @property
    def name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–¥–ª –±–æ—Ç–∞."""
        return self._user_name

    @property
    def is_current(self) -> bool:
        """–ò–º–µ–µ—Ç –ª–∏ –ø—Ä–∞–≤–æ —Ö–æ–¥–∞ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫."""
        return self == self.game.player

    # TODO: game.owner.id
    @property
    def is_owner(self) -> bool:
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã."""
        return self.user_id == self.game.start_player.id

    def take_first_hand(self) -> None:
        """–ë–µ—Ä—ë—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã."""
        self.shotgun_lose = randint(1, 8)
        if self.game.rules.debug_cards:
            logger.debug("{} Draw debug first hand for player", self._user_name)
            self.hand = [
                TakeFourCard(),
                TakeFourCard(),
            ]
            for x in (0, 1, 2, 3):
                self.hand.extend(
                    (
                        TakeCard(CardColor(x)),
                        TurnCard(CardColor(x), 1),
                        ReverseCard(CardColor(x)),
                        NumberCard(CardColor(x), 7),
                        NumberCard(CardColor(x), 2),
                        NumberCard(CardColor(x), 0),
                    )
                )
            return

        logger.debug("{} Draw first hand for player", self._user_name)
        try:
            self.hand = list(self.game.deck.take(7))
        except DeckEmptyError:
            for card in self.hand:
                self.game.deck.put(card)
            logger.warning("There not enough cards in deck for player")
            raise DeckEmptyError()

    def take_cards(self) -> None:
        """–ò–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Å—á—ë—Ç—á–∏–∫—É."""
        take_counter = self.game.take_counter or 1
        logger.debug("{} Draw {} cards", self._user_name, take_counter)

        for card in self.game.deck.take(take_counter):
            self.hand.append(card)
        self.game.take_counter = 0
        self.game.take_flag = True

    def _sort_hand_cards(self, top: BaseCard) -> SortedCards:
        cover = []
        uncover = []
        for card, can_cover in top.get_cover_cards(self.hand):
            if not can_cover:
                uncover.append(card)
                continue
            if (
                isinstance(top, TakeCard)
                and self.game.take_counter
                and not isinstance(card, TakeCard)
            ):
                uncover.append(card)
                continue

            cover.append(card)
            self.bluffing = (
                self.bluffing or card.color == self.game.deck.top.color
            )

        return SortedCards(sorted(cover), sorted(uncover))

    def _get_equal_cards(self, top: BaseCard) -> SortedCards:
        cover = []
        uncover = []
        for card in self.hand:
            if card != top:
                uncover.append(card)
                continue
            if (
                isinstance(top, TakeCard)
                and self.game.take_counter
                and not isinstance(card, TakeCard)
            ):
                uncover.append(card)
                continue

            cover.append(card)
            self.bluffing = (
                self.bluffing or card.color == self.game.deck.top.color
            )

        return SortedCards(sorted(cover), sorted(uncover))

    def get_cover_cards(self) -> SortedCards:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –∏–∑ —Ä—É–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –ö–∞—Ä—Ç—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–Ω –º–æ–∂–µ—Ç –ø–æ–∫—Ä—ã—Ç—å –∏ –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–µ –º–æ–∂–µ—Ç
        –ø–æ–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É.
        """
        top = self.game.deck.top
        logger.debug("Last card was {}", top)
        self.bluffing = False
        if isinstance(top, TakeFourCard) and self.game.take_counter:
            return SortedCards([], self.hand)
        if self.game.state == GameState.SHOTGUN:
            return SortedCards([], self.hand)

        if self.game.rules.intervention and self.game.player != self:
            return self._get_equal_cards(top)
        return self._sort_hand_cards(top)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    # =================

    def on_leave(self) -> None:
        """–î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã."""
        logger.debug("{} Leave from game", self._user_name)
        # –ï—Å–ª–∏ –æ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫, –ø–æ–¥—á–∏—â–∞—Ç—å –∑–∞ —Å–æ–±–æ–π –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è
        if len(self.game.players) == 1:
            return

        for card in self.hand:
            self.game.deck.put(card)
        self.hand.clear()

    def twist_hand(self, other_player: Self) -> None:
        """–ú–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —Ä—É–∫–∏ –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤."""
        logger.info("Switch hand between {} and {}", self, other_player)
        player_hand = self.hand.copy()
        self.hand = other_player.hand.copy()
        other_player.hand = player_hand
        self.game.next_turn()

    def shotgun(self) -> bool:
        """–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –∏–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞."""
        if self.game.rules.single_shotgun:
            self.game.shotgun_current += 1
            is_fired = self.game.shotgun_current >= self.game.shotgun_lose
            if is_fired:
                self.game.shotgun_lose = randint(1, 8)
                self.game.shotgun_current = 0
            return is_fired
        self.shotgun_current += 1
        return self.shotgun_current >= self.shotgun_lose

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    # ==========================

    async def call_bluff(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –±–ª–µ—Ñ.

        –ü–æ –ø—Ä–∞–≤–∏–ª–∞–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª—ã–π –∏–≥—Ä–æ–∫ –±–ª–µ—Ñ–æ–≤–∞–ª, —Ç–æ –æ–Ω –±–µ—Ä—ë—Ç 4 –∫–∞—Ä—Ç—ã.
        –ï—Å–ª–∏ –∂–µ –∏–≥—Ä–æ–∫ –Ω–µ –±–ª–µ—Ñ–æ–≤–∞–ª, —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç —É–∂–µ 6 –∫–∞—Ä—Ç.
        """
        logger.info("{} call bluff {}", self, self.game.prev)
        bluff_player = self.game.bluff_player
        if bluff_player.bluffing:
            self.game.journal.add(
                "üîé <b>–ó–∞–º–µ—á–µ–Ω –±–ª–µ—Ñ</b>!\n"
                f"{bluff_player.user.first_name} –ø–æ–ª—É—á–∞–µ—Ç "
                f"{self.game.take_counter} –∫–∞—Ä—Ç."
            )
            bluff_player.take_cards()

            if len(self.game.deck.cards) == 0:
                self.game.journal.add("üÉè –í –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç.")
        else:
            self.game.take_counter += 2
            self.game.journal.add(
                f"üé© {bluff_player.user.first_name} <b>–ß–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫</b>!\n"
                f"{self.name} –ø–æ–ª—É—á–∞–µ—Ç "
                f"{self.game.take_counter} –∫–∞—Ä—Ç.\n"
            )
            self.take_cards()
            if len(self.game.deck.cards) == 0:
                self.game.journal.add("üÉè –í –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç.")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ–¥
        await self.game.journal.send_journal()
        self.game.next_turn()

    # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
    # =================

    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ."""
        return repr(self._user_name)

    def __str__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –≤–∏–¥–µ."""
        return str(self._user_name)

    def __eq__(self, other_player: Self) -> bool:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.user_id == other_player.user_id

    def __ne__(self, other_player: Self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏–≥—Ä–æ–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç."""
        return self.user_id != other_player.user_id
