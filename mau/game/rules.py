"""–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞.

–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏–∑–º–µ–Ω—è—Ç—å—Å—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä—ã.
"""

from collections.abc import Iterator


class Rule:
    """–ò–≥—Ä–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ."""

    def __init__(self, rules: "GameRules", index: int, name: str) -> None:
        self.rules = rules
        self.index = 1 << index
        self.name = name

        self.rules.rules.append(self)

    @property
    def status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –±–∏—Ç–æ–≤—ã–π —Ñ–ª–∞–≥."""
        return (self.rules.rule_flags & self.index) != 0


class GameRules:
    """–±–∏—Ç–æ–≤—ã–µ —Ñ–ª–∞–≥–∏ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª."""

    def __init__(self) -> None:
        self.rule_flags = 0
        self.rules: list[Rule] = []

        self.twist_hand = Rule(self, 0, "ü§ù –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏")
        self.rotate_cards = Rule(self, 1, "üåÄ –ö—Ä—É–≥–æ–≤–æ–π –æ–±–º–µ–Ω")
        self.one_winner = Rule(self, 2, "üëë –û–¥–∏–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å")
        self.auto_skip = Rule(self, 3, "üí∏ –ê–≤—Ç–æ –ø—Ä–æ–ø—É—Å–∫")
        self.take_until_cover = Rule(self, 4, "üç∑ –ë–µ—Ä—É –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ")
        self.shotgun = Rule(self, 5, "üî´ –†–µ–≤–æ–ª—å–≤–µ—Ä")
        self.deferred_take = Rule(self, 6, "‚è≥ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –≤–∑—è—Ç–∏–µ")
        self.auto_choose_color = Rule(self, 7, "üå∑ —Å–∞–º–æ—Ü–≤–µ—Ç")
        self.random_color = Rule(self, 8, "üé≤ –ö–∞–∫–æ–π —Ü–≤–µ—Ç")
        self.side_effect = Rule(self, 9, "üíé –ü–æ–±–æ—á–Ω—ã–π –≤—ã–±—Ä–æ—Å")
        self.twist_hand_pass = Rule(self, 10, "üëã –ë–µ–∑ –æ–±–º–µ–Ω–∞")
        self.random_cards = Rule(self, 11, "üé∞ –°–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã")
        self.intervention = Rule(self, 12, "üòà –í–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ üîß")
        self.special_wild = Rule(self, 13, "‚ù§Ô∏è –û—Å–æ–±–∞—è –¥–∏–∫–æ—Å—Ç—å")

    def iter_rules(self) -> Iterator[tuple[str, bool]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª."""
        for rule in self.rules:
            yield (rule.name, (self.rule_flags & rule.index) != 0)

    def toggle(self, rule: int) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏—Ç–æ–≤–æ–≥–æ —Ñ–ª–∞–≥–∞."""
        self.rule_flags ^= 1 << rule
